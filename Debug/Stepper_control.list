
Stepper_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007fb0  08007fb0  00017fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fcc  08007fcc  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08007fcc  08007fcc  00017fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fd4  08007fd4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fd4  08007fd4  00017fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fd8  08007fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08007fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000808  200000a0  0800807c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a8  0800807c  000208a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c85  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000324e  00000000  00000000  00038d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001288  00000000  00000000  0003bfa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001140  00000000  00000000  0003d230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023766  00000000  00000000  0003e370  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fe47  00000000  00000000  00061ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cec85  00000000  00000000  0007191d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001405a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f90  00000000  00000000  00140620  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f98 	.word	0x08007f98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	08007f98 	.word	0x08007f98

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fd70 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f844 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f9de 	bl	8000894 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f8aa 	bl	8000630 <MX_I2C1_Init>
  MX_USB_HOST_Init();
 80004dc:	f007 f958 	bl	8007790 <MX_USB_HOST_Init>
  MX_TIM3_Init();
 80004e0:	f000 f924 	bl	800072c <MX_TIM3_Init>
  MX_TIM5_Init();
 80004e4:	f000 f97c 	bl	80007e0 <MX_TIM5_Init>
  MX_TIM1_Init();
 80004e8:	f000 f8d0 	bl	800068c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim5,TIM_CHANNEL_3);
 80004ec:	2108      	movs	r1, #8
 80004ee:	4816      	ldr	r0, [pc, #88]	; (8000548 <main+0x80>)
 80004f0:	f003 fba8 	bl	8003c44 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80004f4:	4815      	ldr	r0, [pc, #84]	; (800054c <main+0x84>)
 80004f6:	f003 fb56 	bl	8003ba6 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004fa:	f007 f96f 	bl	80077dc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);//start the step driver
 80004fe:	2201      	movs	r2, #1
 8000500:	2108      	movs	r1, #8
 8000502:	4813      	ldr	r0, [pc, #76]	; (8000550 <main+0x88>)
 8000504:	f001 f894 	bl	8001630 <HAL_GPIO_WritePin>
    step_count1 = 0;
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <main+0x8c>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 	    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);//Clock wise rotation
 800050e:	2201      	movs	r2, #1
 8000510:	2102      	movs	r1, #2
 8000512:	480f      	ldr	r0, [pc, #60]	; (8000550 <main+0x88>)
 8000514:	f001 f88c 	bl	8001630 <HAL_GPIO_WritePin>

 		htim5.Instance->CNT = 0;
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <main+0x80>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2200      	movs	r2, #0
 800051e:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, v_step1);
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <main+0x80>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <main+0x90>)
 8000526:	6812      	ldr	r2, [r2, #0]
 8000528:	63da      	str	r2, [r3, #60]	; 0x3c
 		__HAL_TIM_SET_AUTORELOAD(&htim5, 2*v_step1);
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <main+0x90>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <main+0x80>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	0052      	lsls	r2, r2, #1
 8000534:	62da      	str	r2, [r3, #44]	; 0x2c
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <main+0x90>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	4a02      	ldr	r2, [pc, #8]	; (8000548 <main+0x80>)
 800053e:	60d3      	str	r3, [r2, #12]


 	    HAL_Delay(1);
 8000540:	2001      	movs	r0, #1
 8000542:	f000 fda7 	bl	8001094 <HAL_Delay>
    MX_USB_HOST_Process();
 8000546:	e7d8      	b.n	80004fa <main+0x32>
 8000548:	20000144 	.word	0x20000144
 800054c:	200001c4 	.word	0x200001c4
 8000550:	40021000 	.word	0x40021000
 8000554:	200000bc 	.word	0x200000bc
 8000558:	2000000c 	.word	0x2000000c

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	; 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f007 fc52 	bl	8007e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a27      	ldr	r2, [pc, #156]	; (8000628 <SystemClock_Config+0xcc>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <SystemClock_Config+0xd0>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d0:	23a8      	movs	r3, #168	; 0xa8
 80005d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d8:	2307      	movs	r3, #7
 80005da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 fe67 	bl	80032b4 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ec:	f000 face 	bl	8000b8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2105      	movs	r1, #5
 800060e:	4618      	mov	r0, r3
 8000610:	f003 f8c0 	bl	8003794 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061a:	f000 fab7 	bl	8000b8c <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_I2C1_Init+0x50>)
 8000636:	4a13      	ldr	r2, [pc, #76]	; (8000684 <MX_I2C1_Init+0x54>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_I2C1_Init+0x50>)
 800063c:	4a12      	ldr	r2, [pc, #72]	; (8000688 <MX_I2C1_Init+0x58>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_I2C1_Init+0x50>)
 800064e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_I2C1_Init+0x50>)
 800066e:	f002 fce9 	bl	8003044 <HAL_I2C_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000678:	f000 fa88 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000f0 	.word	0x200000f0
 8000684:	40005400 	.word	0x40005400
 8000688:	000186a0 	.word	0x000186a0

0800068c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a0:	463b      	mov	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <MX_TIM1_Init+0x98>)
 80006aa:	4a1f      	ldr	r2, [pc, #124]	; (8000728 <MX_TIM1_Init+0x9c>)
 80006ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <MX_TIM1_Init+0x98>)
 80006b0:	2253      	movs	r2, #83	; 0x53
 80006b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_TIM1_Init+0x98>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80006ba:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <MX_TIM1_Init+0x98>)
 80006bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_TIM1_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_TIM1_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_TIM1_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <MX_TIM1_Init+0x98>)
 80006d6:	f003 fa3b 	bl	8003b50 <HAL_TIM_Base_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006e0:	f000 fa54 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	4619      	mov	r1, r3
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <MX_TIM1_Init+0x98>)
 80006f2:	f003 fd93 	bl	800421c <HAL_TIM_ConfigClockSource>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80006fc:	f000 fa46 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_TIM1_Init+0x98>)
 800070e:	f004 f96b 	bl	80049e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000718:	f000 fa38 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200001c4 	.word	0x200001c4
 8000728:	40010000 	.word	0x40010000

0800072c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
 800074a:	615a      	str	r2, [r3, #20]
 800074c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800074e:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_TIM3_Init+0xac>)
 8000750:	4a22      	ldr	r2, [pc, #136]	; (80007dc <MX_TIM3_Init+0xb0>)
 8000752:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000754:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_TIM3_Init+0xac>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <MX_TIM3_Init+0xac>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_TIM3_Init+0xac>)
 8000762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000766:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_TIM3_Init+0xac>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_TIM3_Init+0xac>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000774:	4818      	ldr	r0, [pc, #96]	; (80007d8 <MX_TIM3_Init+0xac>)
 8000776:	f003 fa3a 	bl	8003bee <HAL_TIM_PWM_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000780:	f000 fa04 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4619      	mov	r1, r3
 8000792:	4811      	ldr	r0, [pc, #68]	; (80007d8 <MX_TIM3_Init+0xac>)
 8000794:	f004 f928 	bl	80049e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800079e:	f000 f9f5 	bl	8000b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a2:	2360      	movs	r3, #96	; 0x60
 80007a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	4807      	ldr	r0, [pc, #28]	; (80007d8 <MX_TIM3_Init+0xac>)
 80007ba:	f003 fc69 	bl	8004090 <HAL_TIM_PWM_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80007c4:	f000 f9e2 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <MX_TIM3_Init+0xac>)
 80007ca:	f000 fac5 	bl	8000d58 <HAL_TIM_MspPostInit>

}
 80007ce:	bf00      	nop
 80007d0:	3728      	adds	r7, #40	; 0x28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000184 	.word	0x20000184
 80007dc:	40000400 	.word	0x40000400

080007e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
 80007fe:	615a      	str	r2, [r3, #20]
 8000800:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_TIM5_Init+0xac>)
 8000804:	4a22      	ldr	r2, [pc, #136]	; (8000890 <MX_TIM5_Init+0xb0>)
 8000806:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_TIM5_Init+0xac>)
 800080a:	2253      	movs	r2, #83	; 0x53
 800080c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_TIM5_Init+0xac>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8000814:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_TIM5_Init+0xac>)
 8000816:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800081a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_TIM5_Init+0xac>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_TIM5_Init+0xac>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000828:	4818      	ldr	r0, [pc, #96]	; (800088c <MX_TIM5_Init+0xac>)
 800082a:	f003 f9e0 	bl	8003bee <HAL_TIM_PWM_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000834:	f000 f9aa 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4619      	mov	r1, r3
 8000846:	4811      	ldr	r0, [pc, #68]	; (800088c <MX_TIM5_Init+0xac>)
 8000848:	f004 f8ce 	bl	80049e8 <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000852:	f000 f99b 	bl	8000b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000856:	2360      	movs	r3, #96	; 0x60
 8000858:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2208      	movs	r2, #8
 800086a:	4619      	mov	r1, r3
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <MX_TIM5_Init+0xac>)
 800086e:	f003 fc0f 	bl	8004090 <HAL_TIM_PWM_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000878:	f000 f988 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800087c:	4803      	ldr	r0, [pc, #12]	; (800088c <MX_TIM5_Init+0xac>)
 800087e:	f000 fa6b 	bl	8000d58 <HAL_TIM_MspPostInit>

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000144 	.word	0x20000144
 8000890:	40000c00 	.word	0x40000c00

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	4b7b      	ldr	r3, [pc, #492]	; (8000a9c <MX_GPIO_Init+0x208>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a7a      	ldr	r2, [pc, #488]	; (8000a9c <MX_GPIO_Init+0x208>)
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b78      	ldr	r3, [pc, #480]	; (8000a9c <MX_GPIO_Init+0x208>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0310 	and.w	r3, r3, #16
 80008c2:	61bb      	str	r3, [r7, #24]
 80008c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	4b74      	ldr	r3, [pc, #464]	; (8000a9c <MX_GPIO_Init+0x208>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a73      	ldr	r2, [pc, #460]	; (8000a9c <MX_GPIO_Init+0x208>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b71      	ldr	r3, [pc, #452]	; (8000a9c <MX_GPIO_Init+0x208>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b6d      	ldr	r3, [pc, #436]	; (8000a9c <MX_GPIO_Init+0x208>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a6c      	ldr	r2, [pc, #432]	; (8000a9c <MX_GPIO_Init+0x208>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b6a      	ldr	r3, [pc, #424]	; (8000a9c <MX_GPIO_Init+0x208>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b66      	ldr	r3, [pc, #408]	; (8000a9c <MX_GPIO_Init+0x208>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a65      	ldr	r2, [pc, #404]	; (8000a9c <MX_GPIO_Init+0x208>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b63      	ldr	r3, [pc, #396]	; (8000a9c <MX_GPIO_Init+0x208>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b5f      	ldr	r3, [pc, #380]	; (8000a9c <MX_GPIO_Init+0x208>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a5e      	ldr	r2, [pc, #376]	; (8000a9c <MX_GPIO_Init+0x208>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b5c      	ldr	r3, [pc, #368]	; (8000a9c <MX_GPIO_Init+0x208>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b58      	ldr	r3, [pc, #352]	; (8000a9c <MX_GPIO_Init+0x208>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a57      	ldr	r2, [pc, #348]	; (8000a9c <MX_GPIO_Init+0x208>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b55      	ldr	r3, [pc, #340]	; (8000a9c <MX_GPIO_Init+0x208>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_1, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	210a      	movs	r1, #10
 8000956:	4852      	ldr	r0, [pc, #328]	; (8000aa0 <MX_GPIO_Init+0x20c>)
 8000958:	f000 fe6a 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	2101      	movs	r1, #1
 8000960:	4850      	ldr	r0, [pc, #320]	; (8000aa4 <MX_GPIO_Init+0x210>)
 8000962:	f000 fe65 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000966:	2200      	movs	r2, #0
 8000968:	f24f 0111 	movw	r1, #61457	; 0xf011
 800096c:	484e      	ldr	r0, [pc, #312]	; (8000aa8 <MX_GPIO_Init+0x214>)
 800096e:	f000 fe5f 	bl	8001630 <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE3 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1;
 8000972:	230a      	movs	r3, #10
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4845      	ldr	r0, [pc, #276]	; (8000aa0 <MX_GPIO_Init+0x20c>)
 800098a:	f000 fcb7 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800098e:	2301      	movs	r3, #1
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	483f      	ldr	r0, [pc, #252]	; (8000aa4 <MX_GPIO_Init+0x210>)
 80009a6:	f000 fca9 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009aa:	2308      	movs	r3, #8
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ba:	2305      	movs	r3, #5
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4837      	ldr	r0, [pc, #220]	; (8000aa4 <MX_GPIO_Init+0x210>)
 80009c6:	f000 fc99 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ce:	4b37      	ldr	r3, [pc, #220]	; (8000aac <MX_GPIO_Init+0x218>)
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4834      	ldr	r0, [pc, #208]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 80009de:	f000 fc8d 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009e2:	2310      	movs	r3, #16
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009f2:	2306      	movs	r3, #6
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	482c      	ldr	r0, [pc, #176]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 80009fe:	f000 fc7d 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a02:	2304      	movs	r3, #4
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4827      	ldr	r0, [pc, #156]	; (8000ab4 <MX_GPIO_Init+0x220>)
 8000a16:	f000 fc71 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	481f      	ldr	r0, [pc, #124]	; (8000ab4 <MX_GPIO_Init+0x220>)
 8000a38:	f000 fc60 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           PD0 PD4 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a3c:	f24f 0311 	movw	r3, #61457	; 0xf011
 8000a40:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4814      	ldr	r0, [pc, #80]	; (8000aa8 <MX_GPIO_Init+0x214>)
 8000a56:	f000 fc51 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a5a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a6c:	2306      	movs	r3, #6
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <MX_GPIO_Init+0x210>)
 8000a78:	f000 fc40 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a7c:	2320      	movs	r3, #32
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <MX_GPIO_Init+0x214>)
 8000a90:	f000 fc34 	bl	80012fc <HAL_GPIO_Init>

}
 8000a94:	bf00      	nop
 8000a96:	3730      	adds	r7, #48	; 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	10120000 	.word	0x10120000
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim5)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	step_count1 ++;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000ac8:	6013      	str	r3, [r2, #0]
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	200000bc 	.word	0x200000bc

08000adc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 if(step_count1 < 10000){
 8000ae4:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d833      	bhi.n	8000b58 <HAL_TIM_PeriodElapsedCallback+0x7c>
    if(step_count1 < trap_s1){
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d206      	bcs.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x2e>
        v_step1 -= a_max;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000b08:	6013      	str	r3, [r2, #0]
    }

    if((step_count1 > trap_s1) & (step_count1 < trap_s2)){
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	bf8c      	ite	hi
 8000b16:	2301      	movhi	r3, #1
 8000b18:	2300      	movls	r3, #0
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000b1e:	6819      	ldr	r1, [r3, #0]
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4299      	cmp	r1, r3
 8000b26:	bf34      	ite	cc
 8000b28:	2301      	movcc	r3, #1
 8000b2a:	2300      	movcs	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	4013      	ands	r3, r2
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d002      	beq.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x60>
        v_step1 = 50;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000b38:	2232      	movs	r2, #50	; 0x32
 8000b3a:	601a      	str	r2, [r3, #0]
    }
    if(step_count1 > trap_s2){
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d911      	bls.n	8000b6c <HAL_TIM_PeriodElapsedCallback+0x90>
        v_step1 += a_max;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000b54:	6013      	str	r3, [r2, #0]
 else{
	 if(step_count1 == 10000){
		 HAL_TIM_PWM_Stop_IT(&htim5,TIM_CHANNEL_3);
	 }
 }
}
 8000b56:	e009      	b.n	8000b6c <HAL_TIM_PeriodElapsedCallback+0x90>
	 if(step_count1 == 10000){
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d103      	bne.n	8000b6c <HAL_TIM_PeriodElapsedCallback+0x90>
		 HAL_TIM_PWM_Stop_IT(&htim5,TIM_CHANNEL_3);
 8000b64:	2108      	movs	r1, #8
 8000b66:	4808      	ldr	r0, [pc, #32]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000b68:	f003 f8f0 	bl	8003d4c <HAL_TIM_PWM_Stop_IT>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	200000bc 	.word	0x200000bc
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	2000000c 	.word	0x2000000c
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000004 	.word	0x20000004
 8000b88:	20000144 	.word	0x20000144

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bda:	2007      	movs	r0, #7
 8000bdc:	f000 fb4c 	bl	8001278 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800

08000bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <HAL_I2C_MspInit+0x84>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d12c      	bne.n	8000c68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c2a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c30:	2312      	movs	r3, #18
 8000c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	480c      	ldr	r0, [pc, #48]	; (8000c78 <HAL_I2C_MspInit+0x8c>)
 8000c48:	f000 fb58 	bl	80012fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40005400 	.word	0x40005400
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020400 	.word	0x40020400

08000c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <HAL_TIM_Base_MspInit+0x48>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d115      	bne.n	8000cba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_TIM_Base_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a0c      	ldr	r2, [pc, #48]	; (8000cc8 <HAL_TIM_Base_MspInit+0x4c>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_TIM_Base_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2019      	movs	r0, #25
 8000cb0:	f000 faed 	bl	800128e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cb4:	2019      	movs	r0, #25
 8000cb6:	f000 fb06 	bl	80012c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40010000 	.word	0x40010000
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <HAL_TIM_PWM_MspInit+0x80>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d116      	bne.n	8000d0c <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_TIM_PWM_MspInit+0x84>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a1a      	ldr	r2, [pc, #104]	; (8000d50 <HAL_TIM_PWM_MspInit+0x84>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_TIM_PWM_MspInit+0x84>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	201d      	movs	r0, #29
 8000d00:	f000 fac5 	bl	800128e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d04:	201d      	movs	r0, #29
 8000d06:	f000 fade 	bl	80012c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000d0a:	e01a      	b.n	8000d42 <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM5)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <HAL_TIM_PWM_MspInit+0x88>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d115      	bne.n	8000d42 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_TIM_PWM_MspInit+0x84>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <HAL_TIM_PWM_MspInit+0x84>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_TIM_PWM_MspInit+0x84>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	2032      	movs	r0, #50	; 0x32
 8000d38:	f000 faa9 	bl	800128e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d3c:	2032      	movs	r0, #50	; 0x32
 8000d3e:	f000 fac2 	bl	80012c6 <HAL_NVIC_EnableIRQ>
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40000400 	.word	0x40000400
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40000c00 	.word	0x40000c00

08000d58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a24      	ldr	r2, [pc, #144]	; (8000e08 <HAL_TIM_MspPostInit+0xb0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d11e      	bne.n	8000db8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <HAL_TIM_MspPostInit+0xb4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a22      	ldr	r2, [pc, #136]	; (8000e0c <HAL_TIM_MspPostInit+0xb4>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <HAL_TIM_MspPostInit+0xb4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d96:	2340      	movs	r3, #64	; 0x40
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000da6:	2302      	movs	r3, #2
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4817      	ldr	r0, [pc, #92]	; (8000e10 <HAL_TIM_MspPostInit+0xb8>)
 8000db2:	f000 faa3 	bl	80012fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000db6:	e022      	b.n	8000dfe <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <HAL_TIM_MspPostInit+0xbc>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d11d      	bne.n	8000dfe <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_TIM_MspPostInit+0xb4>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a10      	ldr	r2, [pc, #64]	; (8000e0c <HAL_TIM_MspPostInit+0xb4>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_TIM_MspPostInit+0xb4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dde:	2304      	movs	r3, #4
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000dee:	2302      	movs	r3, #2
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <HAL_TIM_MspPostInit+0xb8>)
 8000dfa:	f000 fa7f 	bl	80012fc <HAL_GPIO_Init>
}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	; 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40000400 	.word	0x40000400
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40000c00 	.word	0x40000c00

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <MemManage_Handler+0x4>

08000e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6c:	f000 f8f2 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e7a:	f003 f801 	bl	8003e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200001c4 	.word	0x200001c4

08000e88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <TIM3_IRQHandler+0x10>)
 8000e8e:	f002 fff7 	bl	8003e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000184 	.word	0x20000184

08000e9c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <TIM5_IRQHandler+0x10>)
 8000ea2:	f002 ffed 	bl	8003e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000144 	.word	0x20000144

08000eb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <OTG_FS_IRQHandler+0x10>)
 8000eb6:	f000 fe63 	bl	8001b80 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200005e0 	.word	0x200005e0

08000ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ecc:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <_sbrk+0x5c>)
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <_sbrk+0x60>)
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <_sbrk+0x64>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <_sbrk+0x68>)
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d207      	bcs.n	8000f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef4:	f006 ff54 	bl	8007da0 <__errno>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	230c      	movs	r3, #12
 8000efc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e009      	b.n	8000f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <_sbrk+0x64>)
 8000f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20020000 	.word	0x20020000
 8000f24:	00000400 	.word	0x00000400
 8000f28:	200000c0 	.word	0x200000c0
 8000f2c:	200008a8 	.word	0x200008a8

08000f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <SystemInit+0x28>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3a:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <SystemInit+0x28>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <SystemInit+0x28>)
 8000f46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f62:	e003      	b.n	8000f6c <LoopCopyDataInit>

08000f64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f6a:	3104      	adds	r1, #4

08000f6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f74:	d3f6      	bcc.n	8000f64 <CopyDataInit>
  ldr  r2, =_sbss
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f78:	e002      	b.n	8000f80 <LoopFillZerobss>

08000f7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f7c:	f842 3b04 	str.w	r3, [r2], #4

08000f80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f84:	d3f9      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f86:	f7ff ffd3 	bl	8000f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f006 ff0f 	bl	8007dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f7ff fa9b 	bl	80004c8 <main>
  bx  lr    
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f98:	08007fdc 	.word	0x08007fdc
  ldr  r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fa0:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 8000fa4:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8000fa8:	200008a8 	.word	0x200008a8

08000fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <HAL_Init+0x40>)
 8000fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <HAL_Init+0x40>)
 8000fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <HAL_Init+0x40>)
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 f94d 	bl	8001278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f808 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f7ff fdda 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x54>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_InitTick+0x58>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f965 	bl	80012e2 <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f92d 	bl	800128e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <HAL_InitTick+0x5c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000010 	.word	0x20000010
 800104c:	20000018 	.word	0x20000018
 8001050:	20000014 	.word	0x20000014

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000018 	.word	0x20000018
 8001078:	20000204 	.word	0x20000204

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000204 	.word	0x20000204

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_Delay+0x40>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000018 	.word	0x20000018

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db0b      	blt.n	8001166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f003 021f 	and.w	r2, r3, #31
 8001154:	4907      	ldr	r1, [pc, #28]	; (8001174 <__NVIC_EnableIRQ+0x38>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	095b      	lsrs	r3, r3, #5
 800115c:	2001      	movs	r0, #1
 800115e:	fa00 f202 	lsl.w	r2, r0, r2
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	; (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	; (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001244:	d301      	bcc.n	800124a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001246:	2301      	movs	r3, #1
 8001248:	e00f      	b.n	800126a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <SysTick_Config+0x40>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001252:	210f      	movs	r1, #15
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f7ff ff8e 	bl	8001178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <SysTick_Config+0x40>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <SysTick_Config+0x40>)
 8001264:	2207      	movs	r2, #7
 8001266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	e000e010 	.word	0xe000e010

08001278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff29 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a0:	f7ff ff3e 	bl	8001120 <__NVIC_GetPriorityGrouping>
 80012a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	6978      	ldr	r0, [r7, #20]
 80012ac:	f7ff ff8e 	bl	80011cc <NVIC_EncodePriority>
 80012b0:	4602      	mov	r2, r0
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff5d 	bl	8001178 <__NVIC_SetPriority>
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff31 	bl	800113c <__NVIC_EnableIRQ>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ffa2 	bl	8001234 <SysTick_Config>
 80012f0:	4603      	mov	r3, r0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	; 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
 8001316:	e16b      	b.n	80015f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001318:	2201      	movs	r2, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	429a      	cmp	r2, r3
 8001332:	f040 815a 	bne.w	80015ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d00b      	beq.n	8001356 <HAL_GPIO_Init+0x5a>
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d007      	beq.n	8001356 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800134a:	2b11      	cmp	r3, #17
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b12      	cmp	r3, #18
 8001354:	d130      	bne.n	80013b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800138c:	2201      	movs	r2, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	f003 0201 	and.w	r2, r3, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0xfc>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b12      	cmp	r3, #18
 80013f6:	d123      	bne.n	8001440 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	08da      	lsrs	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3208      	adds	r2, #8
 8001400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	220f      	movs	r2, #15
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	08da      	lsrs	r2, r3, #3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3208      	adds	r2, #8
 800143a:	69b9      	ldr	r1, [r7, #24]
 800143c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0203 	and.w	r2, r3, #3
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 80b4 	beq.w	80015ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b5f      	ldr	r3, [pc, #380]	; (8001604 <HAL_GPIO_Init+0x308>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a5e      	ldr	r2, [pc, #376]	; (8001604 <HAL_GPIO_Init+0x308>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b5c      	ldr	r3, [pc, #368]	; (8001604 <HAL_GPIO_Init+0x308>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800149e:	4a5a      	ldr	r2, [pc, #360]	; (8001608 <HAL_GPIO_Init+0x30c>)
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	3302      	adds	r3, #2
 80014a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a51      	ldr	r2, [pc, #324]	; (800160c <HAL_GPIO_Init+0x310>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d02b      	beq.n	8001522 <HAL_GPIO_Init+0x226>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a50      	ldr	r2, [pc, #320]	; (8001610 <HAL_GPIO_Init+0x314>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d025      	beq.n	800151e <HAL_GPIO_Init+0x222>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4f      	ldr	r2, [pc, #316]	; (8001614 <HAL_GPIO_Init+0x318>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d01f      	beq.n	800151a <HAL_GPIO_Init+0x21e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4e      	ldr	r2, [pc, #312]	; (8001618 <HAL_GPIO_Init+0x31c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d019      	beq.n	8001516 <HAL_GPIO_Init+0x21a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4d      	ldr	r2, [pc, #308]	; (800161c <HAL_GPIO_Init+0x320>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d013      	beq.n	8001512 <HAL_GPIO_Init+0x216>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4c      	ldr	r2, [pc, #304]	; (8001620 <HAL_GPIO_Init+0x324>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00d      	beq.n	800150e <HAL_GPIO_Init+0x212>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4b      	ldr	r2, [pc, #300]	; (8001624 <HAL_GPIO_Init+0x328>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d007      	beq.n	800150a <HAL_GPIO_Init+0x20e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4a      	ldr	r2, [pc, #296]	; (8001628 <HAL_GPIO_Init+0x32c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d101      	bne.n	8001506 <HAL_GPIO_Init+0x20a>
 8001502:	2307      	movs	r3, #7
 8001504:	e00e      	b.n	8001524 <HAL_GPIO_Init+0x228>
 8001506:	2308      	movs	r3, #8
 8001508:	e00c      	b.n	8001524 <HAL_GPIO_Init+0x228>
 800150a:	2306      	movs	r3, #6
 800150c:	e00a      	b.n	8001524 <HAL_GPIO_Init+0x228>
 800150e:	2305      	movs	r3, #5
 8001510:	e008      	b.n	8001524 <HAL_GPIO_Init+0x228>
 8001512:	2304      	movs	r3, #4
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x228>
 8001516:	2303      	movs	r3, #3
 8001518:	e004      	b.n	8001524 <HAL_GPIO_Init+0x228>
 800151a:	2302      	movs	r3, #2
 800151c:	e002      	b.n	8001524 <HAL_GPIO_Init+0x228>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_GPIO_Init+0x228>
 8001522:	2300      	movs	r3, #0
 8001524:	69fa      	ldr	r2, [r7, #28]
 8001526:	f002 0203 	and.w	r2, r2, #3
 800152a:	0092      	lsls	r2, r2, #2
 800152c:	4093      	lsls	r3, r2
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001534:	4934      	ldr	r1, [pc, #208]	; (8001608 <HAL_GPIO_Init+0x30c>)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3302      	adds	r3, #2
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001542:	4b3a      	ldr	r3, [pc, #232]	; (800162c <HAL_GPIO_Init+0x330>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001566:	4a31      	ldr	r2, [pc, #196]	; (800162c <HAL_GPIO_Init+0x330>)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800156c:	4b2f      	ldr	r3, [pc, #188]	; (800162c <HAL_GPIO_Init+0x330>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001590:	4a26      	ldr	r2, [pc, #152]	; (800162c <HAL_GPIO_Init+0x330>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001596:	4b25      	ldr	r3, [pc, #148]	; (800162c <HAL_GPIO_Init+0x330>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ba:	4a1c      	ldr	r2, [pc, #112]	; (800162c <HAL_GPIO_Init+0x330>)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_GPIO_Init+0x330>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e4:	4a11      	ldr	r2, [pc, #68]	; (800162c <HAL_GPIO_Init+0x330>)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3301      	adds	r3, #1
 80015ee:	61fb      	str	r3, [r7, #28]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	2b0f      	cmp	r3, #15
 80015f4:	f67f ae90 	bls.w	8001318 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015f8:	bf00      	nop
 80015fa:	3724      	adds	r7, #36	; 0x24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40023800 	.word	0x40023800
 8001608:	40013800 	.word	0x40013800
 800160c:	40020000 	.word	0x40020000
 8001610:	40020400 	.word	0x40020400
 8001614:	40020800 	.word	0x40020800
 8001618:	40020c00 	.word	0x40020c00
 800161c:	40021000 	.word	0x40021000
 8001620:	40021400 	.word	0x40021400
 8001624:	40021800 	.word	0x40021800
 8001628:	40021c00 	.word	0x40021c00
 800162c:	40013c00 	.word	0x40013c00

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800164c:	e003      	b.n	8001656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	619a      	str	r2, [r3, #24]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001662:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001664:	b08f      	sub	sp, #60	; 0x3c
 8001666:	af0a      	add	r7, sp, #40	; 0x28
 8001668:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e054      	b.n	800171e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d106      	bne.n	8001694 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f006 f8dc 	bl	800784c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2203      	movs	r2, #3
 8001698:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f003 fa9a 	bl	8004bec <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	687e      	ldr	r6, [r7, #4]
 80016c0:	466d      	mov	r5, sp
 80016c2:	f106 0410 	add.w	r4, r6, #16
 80016c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80016d6:	1d33      	adds	r3, r6, #4
 80016d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016da:	6838      	ldr	r0, [r7, #0]
 80016dc:	f003 fa14 	bl	8004b08 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2101      	movs	r1, #1
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 fa91 	bl	8004c0e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	687e      	ldr	r6, [r7, #4]
 80016f4:	466d      	mov	r5, sp
 80016f6:	f106 0410 	add.w	r4, r6, #16
 80016fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001702:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001706:	e885 0003 	stmia.w	r5, {r0, r1}
 800170a:	1d33      	adds	r3, r6, #4
 800170c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800170e:	6838      	ldr	r0, [r7, #0]
 8001710:	f003 fba4 	bl	8004e5c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001726 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001726:	b590      	push	{r4, r7, lr}
 8001728:	b089      	sub	sp, #36	; 0x24
 800172a:	af04      	add	r7, sp, #16
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	4608      	mov	r0, r1
 8001730:	4611      	mov	r1, r2
 8001732:	461a      	mov	r2, r3
 8001734:	4603      	mov	r3, r0
 8001736:	70fb      	strb	r3, [r7, #3]
 8001738:	460b      	mov	r3, r1
 800173a:	70bb      	strb	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_HCD_HC_Init+0x28>
 800174a:	2302      	movs	r3, #2
 800174c:	e07f      	b.n	800184e <HAL_HCD_HC_Init+0x128>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001756:	78fa      	ldrb	r2, [r7, #3]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	440b      	add	r3, r1
 8001764:	333d      	adds	r3, #61	; 0x3d
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3338      	adds	r3, #56	; 0x38
 800177a:	787a      	ldrb	r2, [r7, #1]
 800177c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3340      	adds	r3, #64	; 0x40
 800178e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001790:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001792:	78fa      	ldrb	r2, [r7, #3]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	3339      	adds	r3, #57	; 0x39
 80017a2:	78fa      	ldrb	r2, [r7, #3]
 80017a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	440b      	add	r3, r1
 80017b4:	333f      	adds	r3, #63	; 0x3f
 80017b6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	78bb      	ldrb	r3, [r7, #2]
 80017c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017c4:	b2d8      	uxtb	r0, r3
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	440b      	add	r3, r1
 80017d2:	333a      	adds	r3, #58	; 0x3a
 80017d4:	4602      	mov	r2, r0
 80017d6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80017d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	da0a      	bge.n	80017f6 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	333b      	adds	r3, #59	; 0x3b
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
 80017f4:	e009      	b.n	800180a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	333b      	adds	r3, #59	; 0x3b
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	333c      	adds	r3, #60	; 0x3c
 800181a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800181e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	787c      	ldrb	r4, [r7, #1]
 8001826:	78ba      	ldrb	r2, [r7, #2]
 8001828:	78f9      	ldrb	r1, [r7, #3]
 800182a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	4623      	mov	r3, r4
 800183c:	f003 fc90 	bl	8005160 <USB_HC_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bd90      	pop	{r4, r7, pc}

08001856 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	460b      	mov	r3, r1
 8001860:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800186c:	2b01      	cmp	r3, #1
 800186e:	d101      	bne.n	8001874 <HAL_HCD_HC_Halt+0x1e>
 8001870:	2302      	movs	r3, #2
 8001872:	e00f      	b.n	8001894 <HAL_HCD_HC_Halt+0x3e>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f003 feca 	bl	800561e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	70fb      	strb	r3, [r7, #3]
 80018ae:	460b      	mov	r3, r1
 80018b0:	70bb      	strb	r3, [r7, #2]
 80018b2:	4613      	mov	r3, r2
 80018b4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	333b      	adds	r3, #59	; 0x3b
 80018c6:	78ba      	ldrb	r2, [r7, #2]
 80018c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80018ca:	78fa      	ldrb	r2, [r7, #3]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	333f      	adds	r3, #63	; 0x3f
 80018da:	787a      	ldrb	r2, [r7, #1]
 80018dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018de:	7c3b      	ldrb	r3, [r7, #16]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d114      	bne.n	800190e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	3342      	adds	r3, #66	; 0x42
 80018f4:	2203      	movs	r2, #3
 80018f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	333d      	adds	r3, #61	; 0x3d
 8001908:	7f3a      	ldrb	r2, [r7, #28]
 800190a:	701a      	strb	r2, [r3, #0]
 800190c:	e009      	b.n	8001922 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	440b      	add	r3, r1
 800191c:	3342      	adds	r3, #66	; 0x42
 800191e:	2202      	movs	r2, #2
 8001920:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001922:	787b      	ldrb	r3, [r7, #1]
 8001924:	2b03      	cmp	r3, #3
 8001926:	f200 80d6 	bhi.w	8001ad6 <HAL_HCD_HC_SubmitRequest+0x23a>
 800192a:	a201      	add	r2, pc, #4	; (adr r2, 8001930 <HAL_HCD_HC_SubmitRequest+0x94>)
 800192c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001930:	08001941 	.word	0x08001941
 8001934:	08001ac1 	.word	0x08001ac1
 8001938:	080019ad 	.word	0x080019ad
 800193c:	08001a37 	.word	0x08001a37
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001940:	7c3b      	ldrb	r3, [r7, #16]
 8001942:	2b01      	cmp	r3, #1
 8001944:	f040 80c9 	bne.w	8001ada <HAL_HCD_HC_SubmitRequest+0x23e>
 8001948:	78bb      	ldrb	r3, [r7, #2]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 80c5 	bne.w	8001ada <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001950:	8b3b      	ldrh	r3, [r7, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	440b      	add	r3, r1
 8001964:	3351      	adds	r3, #81	; 0x51
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	440b      	add	r3, r1
 8001978:	3351      	adds	r3, #81	; 0x51
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10a      	bne.n	8001996 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	3342      	adds	r3, #66	; 0x42
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001994:	e0a1      	b.n	8001ada <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001996:	78fa      	ldrb	r2, [r7, #3]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	440b      	add	r3, r1
 80019a4:	3342      	adds	r3, #66	; 0x42
 80019a6:	2202      	movs	r2, #2
 80019a8:	701a      	strb	r2, [r3, #0]
      break;
 80019aa:	e096      	b.n	8001ada <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80019ac:	78bb      	ldrb	r3, [r7, #2]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d120      	bne.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019b2:	78fa      	ldrb	r2, [r7, #3]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	440b      	add	r3, r1
 80019c0:	3351      	adds	r3, #81	; 0x51
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10a      	bne.n	80019de <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019c8:	78fa      	ldrb	r2, [r7, #3]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	440b      	add	r3, r1
 80019d6:	3342      	adds	r3, #66	; 0x42
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019dc:	e07e      	b.n	8001adc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019de:	78fa      	ldrb	r2, [r7, #3]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	440b      	add	r3, r1
 80019ec:	3342      	adds	r3, #66	; 0x42
 80019ee:	2202      	movs	r2, #2
 80019f0:	701a      	strb	r2, [r3, #0]
      break;
 80019f2:	e073      	b.n	8001adc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	3350      	adds	r3, #80	; 0x50
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10a      	bne.n	8001a20 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a0a:	78fa      	ldrb	r2, [r7, #3]
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	440b      	add	r3, r1
 8001a18:	3342      	adds	r3, #66	; 0x42
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
      break;
 8001a1e:	e05d      	b.n	8001adc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3342      	adds	r3, #66	; 0x42
 8001a30:	2202      	movs	r2, #2
 8001a32:	701a      	strb	r2, [r3, #0]
      break;
 8001a34:	e052      	b.n	8001adc <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a36:	78bb      	ldrb	r3, [r7, #2]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d120      	bne.n	8001a7e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	3351      	adds	r3, #81	; 0x51
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10a      	bne.n	8001a68 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a52:	78fa      	ldrb	r2, [r7, #3]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	440b      	add	r3, r1
 8001a60:	3342      	adds	r3, #66	; 0x42
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a66:	e039      	b.n	8001adc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a68:	78fa      	ldrb	r2, [r7, #3]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	440b      	add	r3, r1
 8001a76:	3342      	adds	r3, #66	; 0x42
 8001a78:	2202      	movs	r2, #2
 8001a7a:	701a      	strb	r2, [r3, #0]
      break;
 8001a7c:	e02e      	b.n	8001adc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a7e:	78fa      	ldrb	r2, [r7, #3]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3350      	adds	r3, #80	; 0x50
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10a      	bne.n	8001aaa <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3342      	adds	r3, #66	; 0x42
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
      break;
 8001aa8:	e018      	b.n	8001adc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aaa:	78fa      	ldrb	r2, [r7, #3]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	440b      	add	r3, r1
 8001ab8:	3342      	adds	r3, #66	; 0x42
 8001aba:	2202      	movs	r2, #2
 8001abc:	701a      	strb	r2, [r3, #0]
      break;
 8001abe:	e00d      	b.n	8001adc <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ac0:	78fa      	ldrb	r2, [r7, #3]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	440b      	add	r3, r1
 8001ace:	3342      	adds	r3, #66	; 0x42
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
      break;
 8001ad4:	e002      	b.n	8001adc <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001ad6:	bf00      	nop
 8001ad8:	e000      	b.n	8001adc <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001ada:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	3344      	adds	r3, #68	; 0x44
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001af0:	78fa      	ldrb	r2, [r7, #3]
 8001af2:	8b39      	ldrh	r1, [r7, #24]
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4403      	add	r3, r0
 8001b00:	3348      	adds	r3, #72	; 0x48
 8001b02:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b04:	78fa      	ldrb	r2, [r7, #3]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	440b      	add	r3, r1
 8001b12:	335c      	adds	r3, #92	; 0x5c
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b18:	78fa      	ldrb	r2, [r7, #3]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	334c      	adds	r3, #76	; 0x4c
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b2c:	78fa      	ldrb	r2, [r7, #3]
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	440b      	add	r3, r1
 8001b3a:	3339      	adds	r3, #57	; 0x39
 8001b3c:	78fa      	ldrb	r2, [r7, #3]
 8001b3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b40:	78fa      	ldrb	r2, [r7, #3]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	440b      	add	r3, r1
 8001b4e:	335d      	adds	r3, #93	; 0x5d
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	3338      	adds	r3, #56	; 0x38
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	18d1      	adds	r1, r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f003 fc00 	bl	8005374 <USB_HC_StartXfer>
 8001b74:	4603      	mov	r3, r0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop

08001b80 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 f91d 	bl	8004dd6 <USB_GetMode>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	f040 80ef 	bne.w	8001d82 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 f901 	bl	8004db0 <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 80e5 	beq.w	8001d80 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 f8f8 	bl	8004db0 <USB_ReadInterrupts>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bca:	d104      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001bd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 f8e8 	bl	8004db0 <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bea:	d104      	bne.n	8001bf6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bf4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 f8d8 	bl	8004db0 <USB_ReadInterrupts>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c0a:	d104      	bne.n	8001c16 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 f8c8 	bl	8004db0 <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d103      	bne.n	8001c32 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 f8ba 	bl	8004db0 <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c46:	d115      	bne.n	8001c74 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c50:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d108      	bne.n	8001c74 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f005 fe70 	bl	8007948 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 f9b0 	bl	8004fd4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f003 f899 	bl	8004db0 <USB_ReadInterrupts>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c88:	d102      	bne.n	8001c90 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f001 f966 	bl	8002f5c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 f88b 	bl	8004db0 <USB_ReadInterrupts>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d106      	bne.n	8001cb2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f005 fe33 	bl	8007910 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2208      	movs	r2, #8
 8001cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 f87a 	bl	8004db0 <USB_ReadInterrupts>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cc6:	d138      	bne.n	8001d3a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 fc95 	bl	80055fc <USB_HC_ReadInterrupt>
 8001cd2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e025      	b.n	8001d26 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d018      	beq.n	8001d20 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	015a      	lsls	r2, r3, #5
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d04:	d106      	bne.n	8001d14 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f8cf 	bl	8001eb0 <HCD_HC_IN_IRQHandler>
 8001d12:	e005      	b.n	8001d20 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 fcfd 	bl	800271a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3301      	adds	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d3d4      	bcc.n	8001cda <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f003 f836 	bl	8004db0 <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d101      	bne.n	8001d52 <HAL_HCD_IRQHandler+0x1d2>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_HCD_IRQHandler+0x1d4>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d014      	beq.n	8001d82 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0210 	bic.w	r2, r2, #16
 8001d66:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f001 f84b 	bl	8002e04 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0210 	orr.w	r2, r2, #16
 8001d7c:	619a      	str	r2, [r3, #24]
 8001d7e:	e000      	b.n	8001d82 <HAL_HCD_IRQHandler+0x202>
      return;
 8001d80:	bf00      	nop
    }
  }
}
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_HCD_Start+0x16>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e013      	b.n	8001dc6 <HAL_HCD_Start+0x3e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 ff0d 	bl	8004bca <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2101      	movs	r1, #1
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 f970 	bl	800509c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_HCD_Stop+0x16>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e00d      	b.n	8001e00 <HAL_HCD_Stop+0x32>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 fd4f 	bl	8005894 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 f917 	bl	8005048 <USB_ResetPort>
 8001e1a:	4603      	mov	r3, r0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	440b      	add	r3, r1
 8001e3e:	335c      	adds	r3, #92	; 0x5c
 8001e40:	781b      	ldrb	r3, [r3, #0]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	334c      	adds	r3, #76	; 0x4c
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 f959 	bl	800513c <USB_GetCurrentFrame>
 8001e8a:	4603      	mov	r3, r0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 f934 	bl	800510e <USB_GetHostSpeed>
 8001ea6:	4603      	mov	r3, r0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d119      	bne.n	8001f14 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	461a      	mov	r2, r3
 8001eee:	2304      	movs	r3, #4
 8001ef0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	0151      	lsls	r1, r2, #5
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	440a      	add	r2, r1
 8001f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	60d3      	str	r3, [r2, #12]
 8001f12:	e0ce      	b.n	80020b2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f2a:	d12c      	bne.n	8001f86 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	440b      	add	r3, r1
 8001f4e:	335d      	adds	r3, #93	; 0x5d
 8001f50:	2207      	movs	r2, #7
 8001f52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	0151      	lsls	r1, r2, #5
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	440a      	add	r2, r1
 8001f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fb4d 	bl	800561e <USB_HC_Halt>
 8001f84:	e095      	b.n	80020b2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d109      	bne.n	8001fb0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2320      	movs	r3, #32
 8001fac:	6093      	str	r3, [r2, #8]
 8001fae:	e080      	b.n	80020b2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d134      	bne.n	8002030 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	0151      	lsls	r1, r2, #5
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	440a      	add	r2, r1
 8001fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	335d      	adds	r3, #93	; 0x5d
 8001ff6:	2205      	movs	r2, #5
 8001ff8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4413      	add	r3, r2
 8002002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002006:	461a      	mov	r2, r3
 8002008:	2310      	movs	r3, #16
 800200a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4413      	add	r3, r2
 8002014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002018:	461a      	mov	r2, r3
 800201a:	2308      	movs	r3, #8
 800201c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f003 faf8 	bl	800561e <USB_HC_Halt>
 800202e:	e040      	b.n	80020b2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	015a      	lsls	r2, r3, #5
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4413      	add	r3, r2
 8002038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002046:	d134      	bne.n	80020b2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	0151      	lsls	r1, r2, #5
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	440a      	add	r2, r1
 800205e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002062:	f043 0302 	orr.w	r3, r3, #2
 8002066:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	4611      	mov	r1, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f003 fad3 	bl	800561e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	015a      	lsls	r2, r3, #5
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4413      	add	r3, r2
 8002080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002084:	461a      	mov	r2, r3
 8002086:	2310      	movs	r3, #16
 8002088:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	335d      	adds	r3, #93	; 0x5d
 800209a:	2208      	movs	r2, #8
 800209c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020aa:	461a      	mov	r2, r3
 80020ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020c8:	d122      	bne.n	8002110 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	0151      	lsls	r1, r2, #5
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	440a      	add	r2, r1
 80020e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 fa92 	bl	800561e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4413      	add	r3, r2
 8002102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002106:	461a      	mov	r2, r3
 8002108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800210c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800210e:	e300      	b.n	8002712 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4413      	add	r3, r2
 8002118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b01      	cmp	r3, #1
 8002124:	f040 80fd 	bne.w	8002322 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01b      	beq.n	8002168 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	440b      	add	r3, r1
 800213e:	3348      	adds	r3, #72	; 0x48
 8002140:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	0159      	lsls	r1, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	440b      	add	r3, r1
 800214a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002154:	1ad1      	subs	r1, r2, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4403      	add	r3, r0
 8002164:	334c      	adds	r3, #76	; 0x4c
 8002166:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	335d      	adds	r3, #93	; 0x5d
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	440b      	add	r3, r1
 800218a:	3358      	adds	r3, #88	; 0x58
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4413      	add	r3, r2
 8002198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219c:	461a      	mov	r2, r3
 800219e:	2301      	movs	r3, #1
 80021a0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	333f      	adds	r3, #63	; 0x3f
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	333f      	adds	r3, #63	; 0x3f
 80021c8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d121      	bne.n	8002212 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	0151      	lsls	r1, r2, #5
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	440a      	add	r2, r1
 80021e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 fa10 	bl	800561e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	461a      	mov	r2, r3
 800220c:	2310      	movs	r3, #16
 800220e:	6093      	str	r3, [r2, #8]
 8002210:	e070      	b.n	80022f4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	333f      	adds	r3, #63	; 0x3f
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d12a      	bne.n	800227e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4413      	add	r3, r2
 8002230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	0151      	lsls	r1, r2, #5
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	440a      	add	r2, r1
 800223e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002242:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002246:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	335c      	adds	r3, #92	; 0x5c
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	b2d8      	uxtb	r0, r3
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	335c      	adds	r3, #92	; 0x5c
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	4601      	mov	r1, r0
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f005 fb74 	bl	8007964 <HAL_HCD_HC_NotifyURBChange_Callback>
 800227c:	e03a      	b.n	80022f4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	440b      	add	r3, r1
 800228c:	333f      	adds	r3, #63	; 0x3f
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d12f      	bne.n	80022f4 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	440b      	add	r3, r1
 80022a2:	335c      	adds	r3, #92	; 0x5c
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	3350      	adds	r3, #80	; 0x50
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	f083 0301 	eor.w	r3, r3, #1
 80022be:	b2d8      	uxtb	r0, r3
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	3350      	adds	r3, #80	; 0x50
 80022d0:	4602      	mov	r2, r0
 80022d2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	b2d8      	uxtb	r0, r3
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	440b      	add	r3, r1
 80022e6:	335c      	adds	r3, #92	; 0x5c
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	4601      	mov	r1, r0
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f005 fb38 	bl	8007964 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	3350      	adds	r3, #80	; 0x50
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	f083 0301 	eor.w	r3, r3, #1
 800230a:	b2d8      	uxtb	r0, r3
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	3350      	adds	r3, #80	; 0x50
 800231c:	4602      	mov	r2, r0
 800231e:	701a      	strb	r2, [r3, #0]
}
 8002320:	e1f7      	b.n	8002712 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4413      	add	r3, r2
 800232a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b02      	cmp	r3, #2
 8002336:	f040 811a 	bne.w	800256e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4413      	add	r3, r2
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	0151      	lsls	r1, r2, #5
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	440a      	add	r2, r1
 8002350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002354:	f023 0302 	bic.w	r3, r3, #2
 8002358:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	335d      	adds	r3, #93	; 0x5d
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d10a      	bne.n	8002386 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	335c      	adds	r3, #92	; 0x5c
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]
 8002384:	e0d9      	b.n	800253a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	335d      	adds	r3, #93	; 0x5d
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b05      	cmp	r3, #5
 800239a:	d10a      	bne.n	80023b2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	335c      	adds	r3, #92	; 0x5c
 80023ac:	2205      	movs	r2, #5
 80023ae:	701a      	strb	r2, [r3, #0]
 80023b0:	e0c3      	b.n	800253a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	335d      	adds	r3, #93	; 0x5d
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b06      	cmp	r3, #6
 80023c6:	d00a      	beq.n	80023de <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	335d      	adds	r3, #93	; 0x5d
 80023d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d156      	bne.n	800248c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	3358      	adds	r3, #88	; 0x58
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	1c59      	adds	r1, r3, #1
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4403      	add	r3, r0
 8002400:	3358      	adds	r3, #88	; 0x58
 8002402:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	3358      	adds	r3, #88	; 0x58
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d914      	bls.n	8002444 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	3358      	adds	r3, #88	; 0x58
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	335c      	adds	r3, #92	; 0x5c
 800243e:	2204      	movs	r2, #4
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	e009      	b.n	8002458 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	335c      	adds	r3, #92	; 0x5c
 8002454:	2202      	movs	r2, #2
 8002456:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800246e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002476:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	461a      	mov	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e056      	b.n	800253a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	440b      	add	r3, r1
 800249a:	335d      	adds	r3, #93	; 0x5d
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d123      	bne.n	80024ea <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	440b      	add	r3, r1
 80024b0:	335c      	adds	r3, #92	; 0x5c
 80024b2:	2202      	movs	r2, #2
 80024b4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024cc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024d4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	461a      	mov	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	e027      	b.n	800253a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	440b      	add	r3, r1
 80024f8:	335d      	adds	r3, #93	; 0x5d
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b07      	cmp	r3, #7
 80024fe:	d11c      	bne.n	800253a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	440b      	add	r3, r1
 800250e:	3358      	adds	r3, #88	; 0x58
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	1c59      	adds	r1, r3, #1
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4403      	add	r3, r0
 8002522:	3358      	adds	r3, #88	; 0x58
 8002524:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	335c      	adds	r3, #92	; 0x5c
 8002536:	2204      	movs	r2, #4
 8002538:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	461a      	mov	r2, r3
 8002548:	2302      	movs	r3, #2
 800254a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	b2d8      	uxtb	r0, r3
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	335c      	adds	r3, #92	; 0x5c
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	4601      	mov	r1, r0
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f005 f9fc 	bl	8007964 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800256c:	e0d1      	b.n	8002712 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002580:	2b80      	cmp	r3, #128	; 0x80
 8002582:	d13e      	bne.n	8002602 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	0151      	lsls	r1, r2, #5
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	440a      	add	r2, r1
 800259a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800259e:	f043 0302 	orr.w	r3, r3, #2
 80025a2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	440b      	add	r3, r1
 80025b2:	3358      	adds	r3, #88	; 0x58
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	1c59      	adds	r1, r3, #1
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4403      	add	r3, r0
 80025c6:	3358      	adds	r3, #88	; 0x58
 80025c8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	335d      	adds	r3, #93	; 0x5d
 80025da:	2206      	movs	r2, #6
 80025dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 f818 	bl	800561e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	461a      	mov	r2, r3
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	6093      	str	r3, [r2, #8]
}
 8002600:	e087      	b.n	8002712 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b10      	cmp	r3, #16
 8002616:	d17c      	bne.n	8002712 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	440b      	add	r3, r1
 8002626:	333f      	adds	r3, #63	; 0x3f
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b03      	cmp	r3, #3
 800262c:	d122      	bne.n	8002674 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	440b      	add	r3, r1
 800263c:	3358      	adds	r3, #88	; 0x58
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	0151      	lsls	r1, r2, #5
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	440a      	add	r2, r1
 8002658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f002 ffd6 	bl	800561e <USB_HC_Halt>
 8002672:	e045      	b.n	8002700 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	440b      	add	r3, r1
 8002682:	333f      	adds	r3, #63	; 0x3f
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	333f      	adds	r3, #63	; 0x3f
 800269a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800269c:	2b02      	cmp	r3, #2
 800269e:	d12f      	bne.n	8002700 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	3358      	adds	r3, #88	; 0x58
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d121      	bne.n	8002700 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	335d      	adds	r3, #93	; 0x5d
 80026cc:	2203      	movs	r2, #3
 80026ce:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	0151      	lsls	r1, r2, #5
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	440a      	add	r2, r1
 80026e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ea:	f043 0302 	orr.w	r3, r3, #2
 80026ee:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f002 ff8f 	bl	800561e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	2310      	movs	r3, #16
 8002710:	6093      	str	r3, [r2, #8]
}
 8002712:	bf00      	nop
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b086      	sub	sp, #24
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b04      	cmp	r3, #4
 8002748:	d119      	bne.n	800277e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	461a      	mov	r2, r3
 8002758:	2304      	movs	r3, #4
 800275a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	0151      	lsls	r1, r2, #5
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	440a      	add	r2, r1
 8002772:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002776:	f043 0302 	orr.w	r3, r3, #2
 800277a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800277c:	e33e      	b.n	8002dfc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b20      	cmp	r3, #32
 8002792:	d141      	bne.n	8002818 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	461a      	mov	r2, r3
 80027a2:	2320      	movs	r3, #32
 80027a4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	440b      	add	r3, r1
 80027b4:	333d      	adds	r3, #61	; 0x3d
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	f040 831f 	bne.w	8002dfc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	333d      	adds	r3, #61	; 0x3d
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	335c      	adds	r3, #92	; 0x5c
 80027e2:	2202      	movs	r2, #2
 80027e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	0151      	lsls	r1, r2, #5
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	440a      	add	r2, r1
 80027fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f002 ff04 	bl	800561e <USB_HC_Halt>
}
 8002816:	e2f1      	b.n	8002dfc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b40      	cmp	r3, #64	; 0x40
 800282c:	d13f      	bne.n	80028ae <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	440b      	add	r3, r1
 800283c:	335d      	adds	r3, #93	; 0x5d
 800283e:	2204      	movs	r2, #4
 8002840:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	333d      	adds	r3, #61	; 0x3d
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	3358      	adds	r3, #88	; 0x58
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4413      	add	r3, r2
 8002872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	0151      	lsls	r1, r2, #5
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	440a      	add	r2, r1
 8002880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f002 fec2 	bl	800561e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a6:	461a      	mov	r2, r3
 80028a8:	2340      	movs	r3, #64	; 0x40
 80028aa:	6093      	str	r3, [r2, #8]
}
 80028ac:	e2a6      	b.n	8002dfc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c4:	d122      	bne.n	800290c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	0151      	lsls	r1, r2, #5
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	440a      	add	r2, r1
 80028dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f002 fe94 	bl	800561e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002902:	461a      	mov	r2, r3
 8002904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002908:	6093      	str	r3, [r2, #8]
}
 800290a:	e277      	b.n	8002dfc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d135      	bne.n	800298e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	3358      	adds	r3, #88	; 0x58
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4413      	add	r3, r2
 800293e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	0151      	lsls	r1, r2, #5
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	440a      	add	r2, r1
 800294c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f002 fe5c 	bl	800561e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002972:	461a      	mov	r2, r3
 8002974:	2301      	movs	r3, #1
 8002976:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	440b      	add	r3, r1
 8002986:	335d      	adds	r3, #93	; 0x5d
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
}
 800298c:	e236      	b.n	8002dfc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d12b      	bne.n	80029fc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b0:	461a      	mov	r2, r3
 80029b2:	2308      	movs	r3, #8
 80029b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	0151      	lsls	r1, r2, #5
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	440a      	add	r2, r1
 80029cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f002 fe1c 	bl	800561e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	335d      	adds	r3, #93	; 0x5d
 80029f6:	2205      	movs	r2, #5
 80029f8:	701a      	strb	r2, [r3, #0]
}
 80029fa:	e1ff      	b.n	8002dfc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d155      	bne.n	8002abe <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	440b      	add	r3, r1
 8002a20:	3358      	adds	r3, #88	; 0x58
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	440b      	add	r3, r1
 8002a34:	335d      	adds	r3, #93	; 0x5d
 8002a36:	2203      	movs	r2, #3
 8002a38:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	440b      	add	r3, r1
 8002a48:	333d      	adds	r3, #61	; 0x3d
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d114      	bne.n	8002a7a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	333c      	adds	r3, #60	; 0x3c
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	440b      	add	r3, r1
 8002a74:	333d      	adds	r3, #61	; 0x3d
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	0151      	lsls	r1, r2, #5
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	440a      	add	r2, r1
 8002a90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f002 fdba 	bl	800561e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2310      	movs	r3, #16
 8002aba:	6093      	str	r3, [r2, #8]
}
 8002abc:	e19e      	b.n	8002dfc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad0:	2b80      	cmp	r3, #128	; 0x80
 8002ad2:	d12b      	bne.n	8002b2c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	0151      	lsls	r1, r2, #5
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	440a      	add	r2, r1
 8002aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aee:	f043 0302 	orr.w	r3, r3, #2
 8002af2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f002 fd8d 	bl	800561e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	440b      	add	r3, r1
 8002b12:	335d      	adds	r3, #93	; 0x5d
 8002b14:	2206      	movs	r2, #6
 8002b16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b24:	461a      	mov	r2, r3
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	6093      	str	r3, [r2, #8]
}
 8002b2a:	e167      	b.n	8002dfc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b42:	d135      	bne.n	8002bb0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	0151      	lsls	r1, r2, #5
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	440a      	add	r2, r1
 8002b5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b5e:	f043 0302 	orr.w	r3, r3, #2
 8002b62:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 fd55 	bl	800561e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	461a      	mov	r2, r3
 8002b82:	2310      	movs	r3, #16
 8002b84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b92:	461a      	mov	r2, r3
 8002b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	440b      	add	r3, r1
 8002ba8:	335d      	adds	r3, #93	; 0x5d
 8002baa:	2208      	movs	r2, #8
 8002bac:	701a      	strb	r2, [r3, #0]
}
 8002bae:	e125      	b.n	8002dfc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	f040 811a 	bne.w	8002dfc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	0151      	lsls	r1, r2, #5
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	440a      	add	r2, r1
 8002bde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002be2:	f023 0302 	bic.w	r3, r3, #2
 8002be6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	440b      	add	r3, r1
 8002bf6:	335d      	adds	r3, #93	; 0x5d
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d137      	bne.n	8002c6e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	440b      	add	r3, r1
 8002c0c:	335c      	adds	r3, #92	; 0x5c
 8002c0e:	2201      	movs	r2, #1
 8002c10:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	440b      	add	r3, r1
 8002c20:	333f      	adds	r3, #63	; 0x3f
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d00b      	beq.n	8002c40 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	440b      	add	r3, r1
 8002c36:	333f      	adds	r3, #63	; 0x3f
 8002c38:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	f040 80c5 	bne.w	8002dca <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3351      	adds	r3, #81	; 0x51
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	f083 0301 	eor.w	r3, r3, #1
 8002c56:	b2d8      	uxtb	r0, r3
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	3351      	adds	r3, #81	; 0x51
 8002c68:	4602      	mov	r2, r0
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	e0ad      	b.n	8002dca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	335d      	adds	r3, #93	; 0x5d
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d10a      	bne.n	8002c9a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	335c      	adds	r3, #92	; 0x5c
 8002c94:	2202      	movs	r2, #2
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e097      	b.n	8002dca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	335d      	adds	r3, #93	; 0x5d
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d10a      	bne.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	335c      	adds	r3, #92	; 0x5c
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	701a      	strb	r2, [r3, #0]
 8002cc4:	e081      	b.n	8002dca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	335d      	adds	r3, #93	; 0x5d
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b05      	cmp	r3, #5
 8002cda:	d10a      	bne.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	440b      	add	r3, r1
 8002cea:	335c      	adds	r3, #92	; 0x5c
 8002cec:	2205      	movs	r2, #5
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	e06b      	b.n	8002dca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	440b      	add	r3, r1
 8002d00:	335d      	adds	r3, #93	; 0x5d
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b06      	cmp	r3, #6
 8002d06:	d00a      	beq.n	8002d1e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	440b      	add	r3, r1
 8002d16:	335d      	adds	r3, #93	; 0x5d
 8002d18:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d155      	bne.n	8002dca <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3358      	adds	r3, #88	; 0x58
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	1c59      	adds	r1, r3, #1
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4403      	add	r3, r0
 8002d40:	3358      	adds	r3, #88	; 0x58
 8002d42:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	3358      	adds	r3, #88	; 0x58
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d914      	bls.n	8002d84 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	440b      	add	r3, r1
 8002d68:	3358      	adds	r3, #88	; 0x58
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	335c      	adds	r3, #92	; 0x5c
 8002d7e:	2204      	movs	r2, #4
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	e009      	b.n	8002d98 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	335c      	adds	r3, #92	; 0x5c
 8002d94:	2202      	movs	r2, #2
 8002d96:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002db6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	2302      	movs	r3, #2
 8002dda:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	b2d8      	uxtb	r0, r3
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	440b      	add	r3, r1
 8002dee:	335c      	adds	r3, #92	; 0x5c
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	4601      	mov	r1, r0
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f004 fdb4 	bl	8007964 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002dfc:	bf00      	nop
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	0c5b      	lsrs	r3, r3, #17
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	091b      	lsrs	r3, r3, #4
 8002e34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e38:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d003      	beq.n	8002e48 <HCD_RXQLVL_IRQHandler+0x44>
 8002e40:	2b05      	cmp	r3, #5
 8002e42:	f000 8082 	beq.w	8002f4a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e46:	e083      	b.n	8002f50 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d07f      	beq.n	8002f4e <HCD_RXQLVL_IRQHandler+0x14a>
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	440b      	add	r3, r1
 8002e5c:	3344      	adds	r3, #68	; 0x44
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d074      	beq.n	8002f4e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	440b      	add	r3, r1
 8002e76:	3344      	adds	r3, #68	; 0x44
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	b292      	uxth	r2, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f001 ff6d 	bl	8004d5e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	440b      	add	r3, r1
 8002e92:	3344      	adds	r3, #68	; 0x44
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	18d1      	adds	r1, r2, r3
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4403      	add	r3, r0
 8002ea8:	3344      	adds	r3, #68	; 0x44
 8002eaa:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	440b      	add	r3, r1
 8002eba:	334c      	adds	r3, #76	; 0x4c
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	18d1      	adds	r1, r2, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4403      	add	r3, r0
 8002ed0:	334c      	adds	r3, #76	; 0x4c
 8002ed2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <HCD_RXQLVL_IRQHandler+0x154>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d031      	beq.n	8002f4e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f00:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f08:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	440b      	add	r3, r1
 8002f2a:	3350      	adds	r3, #80	; 0x50
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	f083 0301 	eor.w	r3, r3, #1
 8002f32:	b2d8      	uxtb	r0, r3
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	440b      	add	r3, r1
 8002f42:	3350      	adds	r3, #80	; 0x50
 8002f44:	4602      	mov	r2, r0
 8002f46:	701a      	strb	r2, [r3, #0]
      break;
 8002f48:	e001      	b.n	8002f4e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002f4a:	bf00      	nop
 8002f4c:	e000      	b.n	8002f50 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002f4e:	bf00      	nop
  }
}
 8002f50:	bf00      	nop
 8002f52:	3728      	adds	r7, #40	; 0x28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	1ff80000 	.word	0x1ff80000

08002f5c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f88:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d10b      	bne.n	8002fac <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d102      	bne.n	8002fa4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f004 fcc4 	bl	800792c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f043 0302 	orr.w	r3, r3, #2
 8002faa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d132      	bne.n	800301c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f043 0308 	orr.w	r3, r3, #8
 8002fbc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d126      	bne.n	8003016 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d113      	bne.n	8002ff8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fda:	d106      	bne.n	8002fea <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f001 fff6 	bl	8004fd4 <USB_InitFSLSPClkSel>
 8002fe8:	e011      	b.n	800300e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2101      	movs	r1, #1
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f001 ffef 	bl	8004fd4 <USB_InitFSLSPClkSel>
 8002ff6:	e00a      	b.n	800300e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d106      	bne.n	800300e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003006:	461a      	mov	r2, r3
 8003008:	f64e 2360 	movw	r3, #60000	; 0xea60
 800300c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f004 fcb6 	bl	8007980 <HAL_HCD_PortEnabled_Callback>
 8003014:	e002      	b.n	800301c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f004 fcc0 	bl	800799c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b20      	cmp	r3, #32
 8003024:	d103      	bne.n	800302e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f043 0320 	orr.w	r3, r3, #32
 800302c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003034:	461a      	mov	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	6013      	str	r3, [r2, #0]
}
 800303a:	bf00      	nop
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e11f      	b.n	8003296 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fd fdbe 	bl	8000bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2224      	movs	r2, #36	; 0x24
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003096:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030a8:	f000 fd3e 	bl	8003b28 <HAL_RCC_GetPCLK1Freq>
 80030ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4a7b      	ldr	r2, [pc, #492]	; (80032a0 <HAL_I2C_Init+0x25c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d807      	bhi.n	80030c8 <HAL_I2C_Init+0x84>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a7a      	ldr	r2, [pc, #488]	; (80032a4 <HAL_I2C_Init+0x260>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	bf94      	ite	ls
 80030c0:	2301      	movls	r3, #1
 80030c2:	2300      	movhi	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e006      	b.n	80030d6 <HAL_I2C_Init+0x92>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4a77      	ldr	r2, [pc, #476]	; (80032a8 <HAL_I2C_Init+0x264>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	bf94      	ite	ls
 80030d0:	2301      	movls	r3, #1
 80030d2:	2300      	movhi	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e0db      	b.n	8003296 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4a72      	ldr	r2, [pc, #456]	; (80032ac <HAL_I2C_Init+0x268>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	0c9b      	lsrs	r3, r3, #18
 80030e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a64      	ldr	r2, [pc, #400]	; (80032a0 <HAL_I2C_Init+0x25c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d802      	bhi.n	8003118 <HAL_I2C_Init+0xd4>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	3301      	adds	r3, #1
 8003116:	e009      	b.n	800312c <HAL_I2C_Init+0xe8>
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800311e:	fb02 f303 	mul.w	r3, r2, r3
 8003122:	4a63      	ldr	r2, [pc, #396]	; (80032b0 <HAL_I2C_Init+0x26c>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	099b      	lsrs	r3, r3, #6
 800312a:	3301      	adds	r3, #1
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	430b      	orrs	r3, r1
 8003132:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800313e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4956      	ldr	r1, [pc, #344]	; (80032a0 <HAL_I2C_Init+0x25c>)
 8003148:	428b      	cmp	r3, r1
 800314a:	d80d      	bhi.n	8003168 <HAL_I2C_Init+0x124>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e59      	subs	r1, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fbb1 f3f3 	udiv	r3, r1, r3
 800315a:	3301      	adds	r3, #1
 800315c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003160:	2b04      	cmp	r3, #4
 8003162:	bf38      	it	cc
 8003164:	2304      	movcc	r3, #4
 8003166:	e04f      	b.n	8003208 <HAL_I2C_Init+0x1c4>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d111      	bne.n	8003194 <HAL_I2C_Init+0x150>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1e58      	subs	r0, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	440b      	add	r3, r1
 800317e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003182:	3301      	adds	r3, #1
 8003184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e012      	b.n	80031ba <HAL_I2C_Init+0x176>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1e58      	subs	r0, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6859      	ldr	r1, [r3, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	0099      	lsls	r1, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031aa:	3301      	adds	r3, #1
 80031ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_I2C_Init+0x17e>
 80031be:	2301      	movs	r3, #1
 80031c0:	e022      	b.n	8003208 <HAL_I2C_Init+0x1c4>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10e      	bne.n	80031e8 <HAL_I2C_Init+0x1a4>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1e58      	subs	r0, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6859      	ldr	r1, [r3, #4]
 80031d2:	460b      	mov	r3, r1
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	440b      	add	r3, r1
 80031d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031dc:	3301      	adds	r3, #1
 80031de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e6:	e00f      	b.n	8003208 <HAL_I2C_Init+0x1c4>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1e58      	subs	r0, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	0099      	lsls	r1, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031fe:	3301      	adds	r3, #1
 8003200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003204:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	6809      	ldr	r1, [r1, #0]
 800320c:	4313      	orrs	r3, r2
 800320e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69da      	ldr	r2, [r3, #28]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003236:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6911      	ldr	r1, [r2, #16]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68d2      	ldr	r2, [r2, #12]
 8003242:	4311      	orrs	r1, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	430b      	orrs	r3, r1
 800324a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	000186a0 	.word	0x000186a0
 80032a4:	001e847f 	.word	0x001e847f
 80032a8:	003d08ff 	.word	0x003d08ff
 80032ac:	431bde83 	.word	0x431bde83
 80032b0:	10624dd3 	.word	0x10624dd3

080032b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e25b      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d075      	beq.n	80033be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032d2:	4ba3      	ldr	r3, [pc, #652]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d00c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032de:	4ba0      	ldr	r3, [pc, #640]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d112      	bne.n	8003310 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ea:	4b9d      	ldr	r3, [pc, #628]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f6:	d10b      	bne.n	8003310 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	4b99      	ldr	r3, [pc, #612]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d05b      	beq.n	80033bc <HAL_RCC_OscConfig+0x108>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d157      	bne.n	80033bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e236      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003318:	d106      	bne.n	8003328 <HAL_RCC_OscConfig+0x74>
 800331a:	4b91      	ldr	r3, [pc, #580]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a90      	ldr	r2, [pc, #576]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e01d      	b.n	8003364 <HAL_RCC_OscConfig+0xb0>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003330:	d10c      	bne.n	800334c <HAL_RCC_OscConfig+0x98>
 8003332:	4b8b      	ldr	r3, [pc, #556]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a8a      	ldr	r2, [pc, #552]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b88      	ldr	r3, [pc, #544]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a87      	ldr	r2, [pc, #540]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	e00b      	b.n	8003364 <HAL_RCC_OscConfig+0xb0>
 800334c:	4b84      	ldr	r3, [pc, #528]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a83      	ldr	r2, [pc, #524]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	4b81      	ldr	r3, [pc, #516]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a80      	ldr	r2, [pc, #512]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 800335e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d013      	beq.n	8003394 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fd fe86 	bl	800107c <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003374:	f7fd fe82 	bl	800107c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	; 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e1fb      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003386:	4b76      	ldr	r3, [pc, #472]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0xc0>
 8003392:	e014      	b.n	80033be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fd fe72 	bl	800107c <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800339c:	f7fd fe6e 	bl	800107c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	; 0x64
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e1e7      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ae:	4b6c      	ldr	r3, [pc, #432]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0xe8>
 80033ba:	e000      	b.n	80033be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d063      	beq.n	8003492 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ca:	4b65      	ldr	r3, [pc, #404]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00b      	beq.n	80033ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033d6:	4b62      	ldr	r3, [pc, #392]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d11c      	bne.n	800341c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e2:	4b5f      	ldr	r3, [pc, #380]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d116      	bne.n	800341c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ee:	4b5c      	ldr	r3, [pc, #368]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <HAL_RCC_OscConfig+0x152>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d001      	beq.n	8003406 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e1bb      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003406:	4b56      	ldr	r3, [pc, #344]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4952      	ldr	r1, [pc, #328]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341a:	e03a      	b.n	8003492 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d020      	beq.n	8003466 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003424:	4b4f      	ldr	r3, [pc, #316]	; (8003564 <HAL_RCC_OscConfig+0x2b0>)
 8003426:	2201      	movs	r2, #1
 8003428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fd fe27 	bl	800107c <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003432:	f7fd fe23 	bl	800107c <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e19c      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003444:	4b46      	ldr	r3, [pc, #280]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003450:	4b43      	ldr	r3, [pc, #268]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4940      	ldr	r1, [pc, #256]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003460:	4313      	orrs	r3, r2
 8003462:	600b      	str	r3, [r1, #0]
 8003464:	e015      	b.n	8003492 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003466:	4b3f      	ldr	r3, [pc, #252]	; (8003564 <HAL_RCC_OscConfig+0x2b0>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fd fe06 	bl	800107c <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003474:	f7fd fe02 	bl	800107c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e17b      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003486:	4b36      	ldr	r3, [pc, #216]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d030      	beq.n	8003500 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d016      	beq.n	80034d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a6:	4b30      	ldr	r3, [pc, #192]	; (8003568 <HAL_RCC_OscConfig+0x2b4>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ac:	f7fd fde6 	bl	800107c <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b4:	f7fd fde2 	bl	800107c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e15b      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c6:	4b26      	ldr	r3, [pc, #152]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 80034c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x200>
 80034d2:	e015      	b.n	8003500 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d4:	4b24      	ldr	r3, [pc, #144]	; (8003568 <HAL_RCC_OscConfig+0x2b4>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034da:	f7fd fdcf 	bl	800107c <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e2:	f7fd fdcb 	bl	800107c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e144      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f4:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 80034f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80a0 	beq.w	800364e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003512:	4b13      	ldr	r3, [pc, #76]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10f      	bne.n	800353e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	4a0e      	ldr	r2, [pc, #56]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352c:	6413      	str	r3, [r2, #64]	; 0x40
 800352e:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <HAL_RCC_OscConfig+0x2ac>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353a:	2301      	movs	r3, #1
 800353c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_RCC_OscConfig+0x2b8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003546:	2b00      	cmp	r3, #0
 8003548:	d121      	bne.n	800358e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354a:	4b08      	ldr	r3, [pc, #32]	; (800356c <HAL_RCC_OscConfig+0x2b8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a07      	ldr	r2, [pc, #28]	; (800356c <HAL_RCC_OscConfig+0x2b8>)
 8003550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003556:	f7fd fd91 	bl	800107c <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355c:	e011      	b.n	8003582 <HAL_RCC_OscConfig+0x2ce>
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	42470000 	.word	0x42470000
 8003568:	42470e80 	.word	0x42470e80
 800356c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003570:	f7fd fd84 	bl	800107c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e0fd      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003582:	4b81      	ldr	r3, [pc, #516]	; (8003788 <HAL_RCC_OscConfig+0x4d4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d106      	bne.n	80035a4 <HAL_RCC_OscConfig+0x2f0>
 8003596:	4b7d      	ldr	r3, [pc, #500]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	4a7c      	ldr	r2, [pc, #496]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6713      	str	r3, [r2, #112]	; 0x70
 80035a2:	e01c      	b.n	80035de <HAL_RCC_OscConfig+0x32a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b05      	cmp	r3, #5
 80035aa:	d10c      	bne.n	80035c6 <HAL_RCC_OscConfig+0x312>
 80035ac:	4b77      	ldr	r3, [pc, #476]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	4a76      	ldr	r2, [pc, #472]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 80035b2:	f043 0304 	orr.w	r3, r3, #4
 80035b6:	6713      	str	r3, [r2, #112]	; 0x70
 80035b8:	4b74      	ldr	r3, [pc, #464]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	4a73      	ldr	r2, [pc, #460]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70
 80035c4:	e00b      	b.n	80035de <HAL_RCC_OscConfig+0x32a>
 80035c6:	4b71      	ldr	r3, [pc, #452]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	4a70      	ldr	r2, [pc, #448]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	6713      	str	r3, [r2, #112]	; 0x70
 80035d2:	4b6e      	ldr	r3, [pc, #440]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	4a6d      	ldr	r2, [pc, #436]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d015      	beq.n	8003612 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e6:	f7fd fd49 	bl	800107c <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fd fd45 	bl	800107c <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e0bc      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003604:	4b61      	ldr	r3, [pc, #388]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ee      	beq.n	80035ee <HAL_RCC_OscConfig+0x33a>
 8003610:	e014      	b.n	800363c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003612:	f7fd fd33 	bl	800107c <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003618:	e00a      	b.n	8003630 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800361a:	f7fd fd2f 	bl	800107c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f241 3288 	movw	r2, #5000	; 0x1388
 8003628:	4293      	cmp	r3, r2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e0a6      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003630:	4b56      	ldr	r3, [pc, #344]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ee      	bne.n	800361a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800363c:	7dfb      	ldrb	r3, [r7, #23]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d105      	bne.n	800364e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003642:	4b52      	ldr	r3, [pc, #328]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	4a51      	ldr	r2, [pc, #324]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 8003648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800364c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 8092 	beq.w	800377c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003658:	4b4c      	ldr	r3, [pc, #304]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b08      	cmp	r3, #8
 8003662:	d05c      	beq.n	800371e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d141      	bne.n	80036f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366c:	4b48      	ldr	r3, [pc, #288]	; (8003790 <HAL_RCC_OscConfig+0x4dc>)
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7fd fd03 	bl	800107c <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367a:	f7fd fcff 	bl	800107c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e078      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368c:	4b3f      	ldr	r3, [pc, #252]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f0      	bne.n	800367a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	019b      	lsls	r3, r3, #6
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	085b      	lsrs	r3, r3, #1
 80036b0:	3b01      	subs	r3, #1
 80036b2:	041b      	lsls	r3, r3, #16
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ba:	061b      	lsls	r3, r3, #24
 80036bc:	4933      	ldr	r1, [pc, #204]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c2:	4b33      	ldr	r3, [pc, #204]	; (8003790 <HAL_RCC_OscConfig+0x4dc>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7fd fcd8 	bl	800107c <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fd fcd4 	bl	800107c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e04d      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e2:	4b2a      	ldr	r3, [pc, #168]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x41c>
 80036ee:	e045      	b.n	800377c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f0:	4b27      	ldr	r3, [pc, #156]	; (8003790 <HAL_RCC_OscConfig+0x4dc>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f6:	f7fd fcc1 	bl	800107c <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036fe:	f7fd fcbd 	bl	800107c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e036      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003710:	4b1e      	ldr	r3, [pc, #120]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f0      	bne.n	80036fe <HAL_RCC_OscConfig+0x44a>
 800371c:	e02e      	b.n	800377c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e029      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800372a:	4b18      	ldr	r3, [pc, #96]	; (800378c <HAL_RCC_OscConfig+0x4d8>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	429a      	cmp	r2, r3
 800373c:	d11c      	bne.n	8003778 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003748:	429a      	cmp	r2, r3
 800374a:	d115      	bne.n	8003778 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003752:	4013      	ands	r3, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003758:	4293      	cmp	r3, r2
 800375a:	d10d      	bne.n	8003778 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d106      	bne.n	8003778 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40007000 	.word	0x40007000
 800378c:	40023800 	.word	0x40023800
 8003790:	42470060 	.word	0x42470060

08003794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0cc      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037a8:	4b68      	ldr	r3, [pc, #416]	; (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d90c      	bls.n	80037d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b65      	ldr	r3, [pc, #404]	; (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b63      	ldr	r3, [pc, #396]	; (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0b8      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d020      	beq.n	800381e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e8:	4b59      	ldr	r3, [pc, #356]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a58      	ldr	r2, [pc, #352]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003800:	4b53      	ldr	r3, [pc, #332]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a52      	ldr	r2, [pc, #328]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800380a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800380c:	4b50      	ldr	r3, [pc, #320]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	494d      	ldr	r1, [pc, #308]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d044      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	4b47      	ldr	r3, [pc, #284]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d119      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e07f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d003      	beq.n	8003852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384e:	2b03      	cmp	r3, #3
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003852:	4b3f      	ldr	r3, [pc, #252]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e06f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003862:	4b3b      	ldr	r3, [pc, #236]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e067      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003872:	4b37      	ldr	r3, [pc, #220]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f023 0203 	bic.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4934      	ldr	r1, [pc, #208]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	4313      	orrs	r3, r2
 8003882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003884:	f7fd fbfa 	bl	800107c <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800388c:	f7fd fbf6 	bl	800107c <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e04f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	4b2b      	ldr	r3, [pc, #172]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 020c 	and.w	r2, r3, #12
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d1eb      	bne.n	800388c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b4:	4b25      	ldr	r3, [pc, #148]	; (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d20c      	bcs.n	80038dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b22      	ldr	r3, [pc, #136]	; (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e032      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4916      	ldr	r1, [pc, #88]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	490e      	ldr	r1, [pc, #56]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800391a:	f000 f821 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 800391e:	4601      	mov	r1, r0
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 800392c:	5cd3      	ldrb	r3, [r2, r3]
 800392e:	fa21 f303 	lsr.w	r3, r1, r3
 8003932:	4a09      	ldr	r2, [pc, #36]	; (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003936:	4b09      	ldr	r3, [pc, #36]	; (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fd fb5a 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40023c00 	.word	0x40023c00
 8003950:	40023800 	.word	0x40023800
 8003954:	08007fb4 	.word	0x08007fb4
 8003958:	20000010 	.word	0x20000010
 800395c:	20000014 	.word	0x20000014

08003960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	2300      	movs	r3, #0
 8003970:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003976:	4b63      	ldr	r3, [pc, #396]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b04      	cmp	r3, #4
 8003980:	d007      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x32>
 8003982:	2b08      	cmp	r3, #8
 8003984:	d008      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x38>
 8003986:	2b00      	cmp	r3, #0
 8003988:	f040 80b4 	bne.w	8003af4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800398c:	4b5e      	ldr	r3, [pc, #376]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800398e:	60bb      	str	r3, [r7, #8]
       break;
 8003990:	e0b3      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003992:	4b5e      	ldr	r3, [pc, #376]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003994:	60bb      	str	r3, [r7, #8]
      break;
 8003996:	e0b0      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003998:	4b5a      	ldr	r3, [pc, #360]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a2:	4b58      	ldr	r3, [pc, #352]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d04a      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ae:	4b55      	ldr	r3, [pc, #340]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	099b      	lsrs	r3, r3, #6
 80039b4:	f04f 0400 	mov.w	r4, #0
 80039b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	ea03 0501 	and.w	r5, r3, r1
 80039c4:	ea04 0602 	and.w	r6, r4, r2
 80039c8:	4629      	mov	r1, r5
 80039ca:	4632      	mov	r2, r6
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	f04f 0400 	mov.w	r4, #0
 80039d4:	0154      	lsls	r4, r2, #5
 80039d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039da:	014b      	lsls	r3, r1, #5
 80039dc:	4619      	mov	r1, r3
 80039de:	4622      	mov	r2, r4
 80039e0:	1b49      	subs	r1, r1, r5
 80039e2:	eb62 0206 	sbc.w	r2, r2, r6
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	f04f 0400 	mov.w	r4, #0
 80039ee:	0194      	lsls	r4, r2, #6
 80039f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039f4:	018b      	lsls	r3, r1, #6
 80039f6:	1a5b      	subs	r3, r3, r1
 80039f8:	eb64 0402 	sbc.w	r4, r4, r2
 80039fc:	f04f 0100 	mov.w	r1, #0
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	00e2      	lsls	r2, r4, #3
 8003a06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a0a:	00d9      	lsls	r1, r3, #3
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4614      	mov	r4, r2
 8003a10:	195b      	adds	r3, r3, r5
 8003a12:	eb44 0406 	adc.w	r4, r4, r6
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	0262      	lsls	r2, r4, #9
 8003a20:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a24:	0259      	lsls	r1, r3, #9
 8003a26:	460b      	mov	r3, r1
 8003a28:	4614      	mov	r4, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f04f 0400 	mov.w	r4, #0
 8003a34:	461a      	mov	r2, r3
 8003a36:	4623      	mov	r3, r4
 8003a38:	f7fc fbc6 	bl	80001c8 <__aeabi_uldivmod>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	460c      	mov	r4, r1
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	e049      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a44:	4b2f      	ldr	r3, [pc, #188]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	099b      	lsrs	r3, r3, #6
 8003a4a:	f04f 0400 	mov.w	r4, #0
 8003a4e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	ea03 0501 	and.w	r5, r3, r1
 8003a5a:	ea04 0602 	and.w	r6, r4, r2
 8003a5e:	4629      	mov	r1, r5
 8003a60:	4632      	mov	r2, r6
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	f04f 0400 	mov.w	r4, #0
 8003a6a:	0154      	lsls	r4, r2, #5
 8003a6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a70:	014b      	lsls	r3, r1, #5
 8003a72:	4619      	mov	r1, r3
 8003a74:	4622      	mov	r2, r4
 8003a76:	1b49      	subs	r1, r1, r5
 8003a78:	eb62 0206 	sbc.w	r2, r2, r6
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	f04f 0400 	mov.w	r4, #0
 8003a84:	0194      	lsls	r4, r2, #6
 8003a86:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a8a:	018b      	lsls	r3, r1, #6
 8003a8c:	1a5b      	subs	r3, r3, r1
 8003a8e:	eb64 0402 	sbc.w	r4, r4, r2
 8003a92:	f04f 0100 	mov.w	r1, #0
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	00e2      	lsls	r2, r4, #3
 8003a9c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003aa0:	00d9      	lsls	r1, r3, #3
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4614      	mov	r4, r2
 8003aa6:	195b      	adds	r3, r3, r5
 8003aa8:	eb44 0406 	adc.w	r4, r4, r6
 8003aac:	f04f 0100 	mov.w	r1, #0
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	02a2      	lsls	r2, r4, #10
 8003ab6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003aba:	0299      	lsls	r1, r3, #10
 8003abc:	460b      	mov	r3, r1
 8003abe:	4614      	mov	r4, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f04f 0400 	mov.w	r4, #0
 8003aca:	461a      	mov	r2, r3
 8003acc:	4623      	mov	r3, r4
 8003ace:	f7fc fb7b 	bl	80001c8 <__aeabi_uldivmod>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	460c      	mov	r4, r1
 8003ad6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	0c1b      	lsrs	r3, r3, #16
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af0:	60bb      	str	r3, [r7, #8]
      break;
 8003af2:	e002      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003af6:	60bb      	str	r3, [r7, #8]
      break;
 8003af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003afa:	68bb      	ldr	r3, [r7, #8]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b04:	40023800 	.word	0x40023800
 8003b08:	00f42400 	.word	0x00f42400
 8003b0c:	007a1200 	.word	0x007a1200

08003b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b14:	4b03      	ldr	r3, [pc, #12]	; (8003b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b16:	681b      	ldr	r3, [r3, #0]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000010 	.word	0x20000010

08003b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b2c:	f7ff fff0 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8003b30:	4601      	mov	r1, r0
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	0a9b      	lsrs	r3, r3, #10
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	4a03      	ldr	r2, [pc, #12]	; (8003b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b3e:	5cd3      	ldrb	r3, [r2, r3]
 8003b40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	08007fc4 	.word	0x08007fc4

08003b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e01d      	b.n	8003b9e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fd f880 	bl	8000c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	f000 fc1a 	bl	80043c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0201 	orr.w	r2, r2, #1
 8003bbc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b06      	cmp	r3, #6
 8003bce:	d007      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e01d      	b.n	8003c3c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7fd f859 	bl	8000ccc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f000 fbcb 	bl	80043c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b0c      	cmp	r3, #12
 8003c52:	d841      	bhi.n	8003cd8 <HAL_TIM_PWM_Start_IT+0x94>
 8003c54:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <HAL_TIM_PWM_Start_IT+0x18>)
 8003c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5a:	bf00      	nop
 8003c5c:	08003c91 	.word	0x08003c91
 8003c60:	08003cd9 	.word	0x08003cd9
 8003c64:	08003cd9 	.word	0x08003cd9
 8003c68:	08003cd9 	.word	0x08003cd9
 8003c6c:	08003ca3 	.word	0x08003ca3
 8003c70:	08003cd9 	.word	0x08003cd9
 8003c74:	08003cd9 	.word	0x08003cd9
 8003c78:	08003cd9 	.word	0x08003cd9
 8003c7c:	08003cb5 	.word	0x08003cb5
 8003c80:	08003cd9 	.word	0x08003cd9
 8003c84:	08003cd9 	.word	0x08003cd9
 8003c88:	08003cd9 	.word	0x08003cd9
 8003c8c:	08003cc7 	.word	0x08003cc7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0202 	orr.w	r2, r2, #2
 8003c9e:	60da      	str	r2, [r3, #12]
      break;
 8003ca0:	e01b      	b.n	8003cda <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0204 	orr.w	r2, r2, #4
 8003cb0:	60da      	str	r2, [r3, #12]
      break;
 8003cb2:	e012      	b.n	8003cda <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0208 	orr.w	r2, r2, #8
 8003cc2:	60da      	str	r2, [r3, #12]
      break;
 8003cc4:	e009      	b.n	8003cda <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0210 	orr.w	r2, r2, #16
 8003cd4:	60da      	str	r2, [r3, #12]
      break;
 8003cd6:	e000      	b.n	8003cda <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8003cd8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	6839      	ldr	r1, [r7, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fe5a 	bl	800499c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a15      	ldr	r2, [pc, #84]	; (8003d44 <HAL_TIM_PWM_Start_IT+0x100>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <HAL_TIM_PWM_Start_IT+0xb8>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <HAL_TIM_PWM_Start_IT+0x104>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIM_PWM_Start_IT+0xbc>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <HAL_TIM_PWM_Start_IT+0xbe>
 8003d00:	2300      	movs	r3, #0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b06      	cmp	r3, #6
 8003d26:	d007      	beq.n	8003d38 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40010000 	.word	0x40010000
 8003d48:	40010400 	.word	0x40010400

08003d4c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b0c      	cmp	r3, #12
 8003d5a:	d841      	bhi.n	8003de0 <HAL_TIM_PWM_Stop_IT+0x94>
 8003d5c:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <HAL_TIM_PWM_Stop_IT+0x18>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003d99 	.word	0x08003d99
 8003d68:	08003de1 	.word	0x08003de1
 8003d6c:	08003de1 	.word	0x08003de1
 8003d70:	08003de1 	.word	0x08003de1
 8003d74:	08003dab 	.word	0x08003dab
 8003d78:	08003de1 	.word	0x08003de1
 8003d7c:	08003de1 	.word	0x08003de1
 8003d80:	08003de1 	.word	0x08003de1
 8003d84:	08003dbd 	.word	0x08003dbd
 8003d88:	08003de1 	.word	0x08003de1
 8003d8c:	08003de1 	.word	0x08003de1
 8003d90:	08003de1 	.word	0x08003de1
 8003d94:	08003dcf 	.word	0x08003dcf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0202 	bic.w	r2, r2, #2
 8003da6:	60da      	str	r2, [r3, #12]
      break;
 8003da8:	e01b      	b.n	8003de2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0204 	bic.w	r2, r2, #4
 8003db8:	60da      	str	r2, [r3, #12]
      break;
 8003dba:	e012      	b.n	8003de2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0208 	bic.w	r2, r2, #8
 8003dca:	60da      	str	r2, [r3, #12]
      break;
 8003dcc:	e009      	b.n	8003de2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0210 	bic.w	r2, r2, #16
 8003ddc:	60da      	str	r2, [r3, #12]
      break;
 8003dde:	e000      	b.n	8003de2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8003de0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2200      	movs	r2, #0
 8003de8:	6839      	ldr	r1, [r7, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fdd6 	bl	800499c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a20      	ldr	r2, [pc, #128]	; (8003e78 <HAL_TIM_PWM_Stop_IT+0x12c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_TIM_PWM_Stop_IT+0xb8>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a1f      	ldr	r2, [pc, #124]	; (8003e7c <HAL_TIM_PWM_Stop_IT+0x130>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d101      	bne.n	8003e08 <HAL_TIM_PWM_Stop_IT+0xbc>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <HAL_TIM_PWM_Stop_IT+0xbe>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d017      	beq.n	8003e3e <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6a1a      	ldr	r2, [r3, #32]
 8003e14:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10f      	bne.n	8003e3e <HAL_TIM_PWM_Stop_IT+0xf2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6a1a      	ldr	r2, [r3, #32]
 8003e24:	f240 4344 	movw	r3, #1092	; 0x444
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d107      	bne.n	8003e3e <HAL_TIM_PWM_Stop_IT+0xf2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10f      	bne.n	8003e6e <HAL_TIM_PWM_Stop_IT+0x122>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	f240 4344 	movw	r3, #1092	; 0x444
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d107      	bne.n	8003e6e <HAL_TIM_PWM_Stop_IT+0x122>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0201 	bic.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	40010400 	.word	0x40010400

08003e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d122      	bne.n	8003edc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d11b      	bne.n	8003edc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0202 	mvn.w	r2, #2
 8003eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fa6b 	bl	800439e <HAL_TIM_IC_CaptureCallback>
 8003ec8:	e005      	b.n	8003ed6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fa5d 	bl	800438a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7fc fdf1 	bl	8000ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d122      	bne.n	8003f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d11b      	bne.n	8003f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0204 	mvn.w	r2, #4
 8003f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2202      	movs	r2, #2
 8003f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fa41 	bl	800439e <HAL_TIM_IC_CaptureCallback>
 8003f1c:	e005      	b.n	8003f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fa33 	bl	800438a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7fc fdc7 	bl	8000ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d122      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d11b      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0208 	mvn.w	r2, #8
 8003f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2204      	movs	r2, #4
 8003f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fa17 	bl	800439e <HAL_TIM_IC_CaptureCallback>
 8003f70:	e005      	b.n	8003f7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fa09 	bl	800438a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7fc fd9d 	bl	8000ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b10      	cmp	r3, #16
 8003f90:	d122      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	d11b      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0210 	mvn.w	r2, #16
 8003fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2208      	movs	r2, #8
 8003fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f9ed 	bl	800439e <HAL_TIM_IC_CaptureCallback>
 8003fc4:	e005      	b.n	8003fd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f9df 	bl	800438a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7fc fd73 	bl	8000ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d10e      	bne.n	8004004 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d107      	bne.n	8004004 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0201 	mvn.w	r2, #1
 8003ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fc fd6c 	bl	8000adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400e:	2b80      	cmp	r3, #128	; 0x80
 8004010:	d10e      	bne.n	8004030 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401c:	2b80      	cmp	r3, #128	; 0x80
 800401e:	d107      	bne.n	8004030 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fd62 	bl	8004af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403a:	2b40      	cmp	r3, #64	; 0x40
 800403c:	d10e      	bne.n	800405c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b40      	cmp	r3, #64	; 0x40
 800404a:	d107      	bne.n	800405c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f9ab 	bl	80043b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b20      	cmp	r3, #32
 8004068:	d10e      	bne.n	8004088 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b20      	cmp	r3, #32
 8004076:	d107      	bne.n	8004088 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0220 	mvn.w	r2, #32
 8004080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fd2c 	bl	8004ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004088:	bf00      	nop
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e0b4      	b.n	8004214 <HAL_TIM_PWM_ConfigChannel+0x184>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2202      	movs	r2, #2
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b0c      	cmp	r3, #12
 80040be:	f200 809f 	bhi.w	8004200 <HAL_TIM_PWM_ConfigChannel+0x170>
 80040c2:	a201      	add	r2, pc, #4	; (adr r2, 80040c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c8:	080040fd 	.word	0x080040fd
 80040cc:	08004201 	.word	0x08004201
 80040d0:	08004201 	.word	0x08004201
 80040d4:	08004201 	.word	0x08004201
 80040d8:	0800413d 	.word	0x0800413d
 80040dc:	08004201 	.word	0x08004201
 80040e0:	08004201 	.word	0x08004201
 80040e4:	08004201 	.word	0x08004201
 80040e8:	0800417f 	.word	0x0800417f
 80040ec:	08004201 	.word	0x08004201
 80040f0:	08004201 	.word	0x08004201
 80040f4:	08004201 	.word	0x08004201
 80040f8:	080041bf 	.word	0x080041bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fa00 	bl	8004508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0208 	orr.w	r2, r2, #8
 8004116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0204 	bic.w	r2, r2, #4
 8004126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6999      	ldr	r1, [r3, #24]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	619a      	str	r2, [r3, #24]
      break;
 800413a:	e062      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fa50 	bl	80045e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6999      	ldr	r1, [r3, #24]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	021a      	lsls	r2, r3, #8
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	619a      	str	r2, [r3, #24]
      break;
 800417c:	e041      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68b9      	ldr	r1, [r7, #8]
 8004184:	4618      	mov	r0, r3
 8004186:	f000 faa5 	bl	80046d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69da      	ldr	r2, [r3, #28]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0208 	orr.w	r2, r2, #8
 8004198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0204 	bic.w	r2, r2, #4
 80041a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69d9      	ldr	r1, [r3, #28]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	61da      	str	r2, [r3, #28]
      break;
 80041bc:	e021      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 faf9 	bl	80047bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69da      	ldr	r2, [r3, #28]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69d9      	ldr	r1, [r3, #28]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	021a      	lsls	r2, r3, #8
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	61da      	str	r2, [r3, #28]
      break;
 80041fe:	e000      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004200:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_TIM_ConfigClockSource+0x18>
 8004230:	2302      	movs	r3, #2
 8004232:	e0a6      	b.n	8004382 <HAL_TIM_ConfigClockSource+0x166>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004252:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800425a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d067      	beq.n	800433c <HAL_TIM_ConfigClockSource+0x120>
 800426c:	2b40      	cmp	r3, #64	; 0x40
 800426e:	d80b      	bhi.n	8004288 <HAL_TIM_ConfigClockSource+0x6c>
 8004270:	2b10      	cmp	r3, #16
 8004272:	d073      	beq.n	800435c <HAL_TIM_ConfigClockSource+0x140>
 8004274:	2b10      	cmp	r3, #16
 8004276:	d802      	bhi.n	800427e <HAL_TIM_ConfigClockSource+0x62>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d06f      	beq.n	800435c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800427c:	e078      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800427e:	2b20      	cmp	r3, #32
 8004280:	d06c      	beq.n	800435c <HAL_TIM_ConfigClockSource+0x140>
 8004282:	2b30      	cmp	r3, #48	; 0x30
 8004284:	d06a      	beq.n	800435c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004286:	e073      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004288:	2b70      	cmp	r3, #112	; 0x70
 800428a:	d00d      	beq.n	80042a8 <HAL_TIM_ConfigClockSource+0x8c>
 800428c:	2b70      	cmp	r3, #112	; 0x70
 800428e:	d804      	bhi.n	800429a <HAL_TIM_ConfigClockSource+0x7e>
 8004290:	2b50      	cmp	r3, #80	; 0x50
 8004292:	d033      	beq.n	80042fc <HAL_TIM_ConfigClockSource+0xe0>
 8004294:	2b60      	cmp	r3, #96	; 0x60
 8004296:	d041      	beq.n	800431c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004298:	e06a      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800429a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429e:	d066      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x152>
 80042a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a4:	d017      	beq.n	80042d6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80042a6:	e063      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	6899      	ldr	r1, [r3, #8]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f000 fb50 	bl	800495c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	609a      	str	r2, [r3, #8]
      break;
 80042d4:	e04c      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6899      	ldr	r1, [r3, #8]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f000 fb39 	bl	800495c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042f8:	609a      	str	r2, [r3, #8]
      break;
 80042fa:	e039      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	6859      	ldr	r1, [r3, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	461a      	mov	r2, r3
 800430a:	f000 faad 	bl	8004868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2150      	movs	r1, #80	; 0x50
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fb06 	bl	8004926 <TIM_ITRx_SetConfig>
      break;
 800431a:	e029      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	6859      	ldr	r1, [r3, #4]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	461a      	mov	r2, r3
 800432a:	f000 facc 	bl	80048c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2160      	movs	r1, #96	; 0x60
 8004334:	4618      	mov	r0, r3
 8004336:	f000 faf6 	bl	8004926 <TIM_ITRx_SetConfig>
      break;
 800433a:	e019      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	6859      	ldr	r1, [r3, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	461a      	mov	r2, r3
 800434a:	f000 fa8d 	bl	8004868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2140      	movs	r1, #64	; 0x40
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fae6 	bl	8004926 <TIM_ITRx_SetConfig>
      break;
 800435a:	e009      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4619      	mov	r1, r3
 8004366:	4610      	mov	r0, r2
 8004368:	f000 fadd 	bl	8004926 <TIM_ITRx_SetConfig>
      break;
 800436c:	e000      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800436e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a40      	ldr	r2, [pc, #256]	; (80044dc <TIM_Base_SetConfig+0x114>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d013      	beq.n	8004408 <TIM_Base_SetConfig+0x40>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e6:	d00f      	beq.n	8004408 <TIM_Base_SetConfig+0x40>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a3d      	ldr	r2, [pc, #244]	; (80044e0 <TIM_Base_SetConfig+0x118>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00b      	beq.n	8004408 <TIM_Base_SetConfig+0x40>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a3c      	ldr	r2, [pc, #240]	; (80044e4 <TIM_Base_SetConfig+0x11c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d007      	beq.n	8004408 <TIM_Base_SetConfig+0x40>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a3b      	ldr	r2, [pc, #236]	; (80044e8 <TIM_Base_SetConfig+0x120>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d003      	beq.n	8004408 <TIM_Base_SetConfig+0x40>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a3a      	ldr	r2, [pc, #232]	; (80044ec <TIM_Base_SetConfig+0x124>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d108      	bne.n	800441a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a2f      	ldr	r2, [pc, #188]	; (80044dc <TIM_Base_SetConfig+0x114>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d02b      	beq.n	800447a <TIM_Base_SetConfig+0xb2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004428:	d027      	beq.n	800447a <TIM_Base_SetConfig+0xb2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a2c      	ldr	r2, [pc, #176]	; (80044e0 <TIM_Base_SetConfig+0x118>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d023      	beq.n	800447a <TIM_Base_SetConfig+0xb2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a2b      	ldr	r2, [pc, #172]	; (80044e4 <TIM_Base_SetConfig+0x11c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d01f      	beq.n	800447a <TIM_Base_SetConfig+0xb2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a2a      	ldr	r2, [pc, #168]	; (80044e8 <TIM_Base_SetConfig+0x120>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d01b      	beq.n	800447a <TIM_Base_SetConfig+0xb2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a29      	ldr	r2, [pc, #164]	; (80044ec <TIM_Base_SetConfig+0x124>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d017      	beq.n	800447a <TIM_Base_SetConfig+0xb2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a28      	ldr	r2, [pc, #160]	; (80044f0 <TIM_Base_SetConfig+0x128>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <TIM_Base_SetConfig+0xb2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a27      	ldr	r2, [pc, #156]	; (80044f4 <TIM_Base_SetConfig+0x12c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00f      	beq.n	800447a <TIM_Base_SetConfig+0xb2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a26      	ldr	r2, [pc, #152]	; (80044f8 <TIM_Base_SetConfig+0x130>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00b      	beq.n	800447a <TIM_Base_SetConfig+0xb2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a25      	ldr	r2, [pc, #148]	; (80044fc <TIM_Base_SetConfig+0x134>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d007      	beq.n	800447a <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a24      	ldr	r2, [pc, #144]	; (8004500 <TIM_Base_SetConfig+0x138>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d003      	beq.n	800447a <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a23      	ldr	r2, [pc, #140]	; (8004504 <TIM_Base_SetConfig+0x13c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d108      	bne.n	800448c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <TIM_Base_SetConfig+0x114>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d003      	beq.n	80044c0 <TIM_Base_SetConfig+0xf8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a0c      	ldr	r2, [pc, #48]	; (80044ec <TIM_Base_SetConfig+0x124>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d103      	bne.n	80044c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	615a      	str	r2, [r3, #20]
}
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40010000 	.word	0x40010000
 80044e0:	40000400 	.word	0x40000400
 80044e4:	40000800 	.word	0x40000800
 80044e8:	40000c00 	.word	0x40000c00
 80044ec:	40010400 	.word	0x40010400
 80044f0:	40014000 	.word	0x40014000
 80044f4:	40014400 	.word	0x40014400
 80044f8:	40014800 	.word	0x40014800
 80044fc:	40001800 	.word	0x40001800
 8004500:	40001c00 	.word	0x40001c00
 8004504:	40002000 	.word	0x40002000

08004508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f023 0201 	bic.w	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0303 	bic.w	r3, r3, #3
 800453e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f023 0302 	bic.w	r3, r3, #2
 8004550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4313      	orrs	r3, r2
 800455a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a20      	ldr	r2, [pc, #128]	; (80045e0 <TIM_OC1_SetConfig+0xd8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_OC1_SetConfig+0x64>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <TIM_OC1_SetConfig+0xdc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d10c      	bne.n	8004586 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f023 0308 	bic.w	r3, r3, #8
 8004572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f023 0304 	bic.w	r3, r3, #4
 8004584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a15      	ldr	r2, [pc, #84]	; (80045e0 <TIM_OC1_SetConfig+0xd8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d003      	beq.n	8004596 <TIM_OC1_SetConfig+0x8e>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <TIM_OC1_SetConfig+0xdc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d111      	bne.n	80045ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800459c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	621a      	str	r2, [r3, #32]
}
 80045d4:	bf00      	nop
 80045d6:	371c      	adds	r7, #28
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40010400 	.word	0x40010400

080045e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f023 0210 	bic.w	r2, r3, #16
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 0320 	bic.w	r3, r3, #32
 8004632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a22      	ldr	r2, [pc, #136]	; (80046cc <TIM_OC2_SetConfig+0xe4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_OC2_SetConfig+0x68>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a21      	ldr	r2, [pc, #132]	; (80046d0 <TIM_OC2_SetConfig+0xe8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d10d      	bne.n	800466c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800466a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a17      	ldr	r2, [pc, #92]	; (80046cc <TIM_OC2_SetConfig+0xe4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <TIM_OC2_SetConfig+0x94>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a16      	ldr	r2, [pc, #88]	; (80046d0 <TIM_OC2_SetConfig+0xe8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d113      	bne.n	80046a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800468a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40010400 	.word	0x40010400

080046d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800471c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a21      	ldr	r2, [pc, #132]	; (80047b4 <TIM_OC3_SetConfig+0xe0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d003      	beq.n	800473a <TIM_OC3_SetConfig+0x66>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a20      	ldr	r2, [pc, #128]	; (80047b8 <TIM_OC3_SetConfig+0xe4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d10d      	bne.n	8004756 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	021b      	lsls	r3, r3, #8
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a16      	ldr	r2, [pc, #88]	; (80047b4 <TIM_OC3_SetConfig+0xe0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d003      	beq.n	8004766 <TIM_OC3_SetConfig+0x92>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a15      	ldr	r2, [pc, #84]	; (80047b8 <TIM_OC3_SetConfig+0xe4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d113      	bne.n	800478e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800476c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	621a      	str	r2, [r3, #32]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40010400 	.word	0x40010400

080047bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	021b      	lsls	r3, r3, #8
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	031b      	lsls	r3, r3, #12
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a12      	ldr	r2, [pc, #72]	; (8004860 <TIM_OC4_SetConfig+0xa4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d003      	beq.n	8004824 <TIM_OC4_SetConfig+0x68>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a11      	ldr	r2, [pc, #68]	; (8004864 <TIM_OC4_SetConfig+0xa8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d109      	bne.n	8004838 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800482a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	019b      	lsls	r3, r3, #6
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	621a      	str	r2, [r3, #32]
}
 8004852:	bf00      	nop
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40010000 	.word	0x40010000
 8004864:	40010400 	.word	0x40010400

08004868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	f023 0201 	bic.w	r2, r3, #1
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f023 030a 	bic.w	r3, r3, #10
 80048a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b087      	sub	sp, #28
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f023 0210 	bic.w	r2, r3, #16
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	031b      	lsls	r3, r3, #12
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004902:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004926:	b480      	push	{r7}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	f043 0307 	orr.w	r3, r3, #7
 8004948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	609a      	str	r2, [r3, #8]
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	021a      	lsls	r2, r3, #8
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	431a      	orrs	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4313      	orrs	r3, r2
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	609a      	str	r2, [r3, #8]
}
 8004990:	bf00      	nop
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	2201      	movs	r2, #1
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a1a      	ldr	r2, [r3, #32]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	43db      	mvns	r3, r3
 80049be:	401a      	ands	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1a      	ldr	r2, [r3, #32]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	fa01 f303 	lsl.w	r3, r1, r3
 80049d4:	431a      	orrs	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e05a      	b.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a21      	ldr	r2, [pc, #132]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d022      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4c:	d01d      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1d      	ldr	r2, [pc, #116]	; (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d018      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1b      	ldr	r2, [pc, #108]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1a      	ldr	r2, [pc, #104]	; (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00e      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d009      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a17      	ldr	r2, [pc, #92]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a15      	ldr	r2, [pc, #84]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d10c      	bne.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800
 8004ad0:	40000c00 	.word	0x40000c00
 8004ad4:	40010400 	.word	0x40010400
 8004ad8:	40014000 	.word	0x40014000
 8004adc:	40001800 	.word	0x40001800

08004ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b08:	b084      	sub	sp, #16
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b084      	sub	sp, #16
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	f107 001c 	add.w	r0, r7, #28
 8004b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d122      	bne.n	8004b66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d105      	bne.n	8004b5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f94a 	bl	8004df4 <USB_CoreReset>
 8004b60:	4603      	mov	r3, r0
 8004b62:	73fb      	strb	r3, [r7, #15]
 8004b64:	e01a      	b.n	8004b9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f93e 	bl	8004df4 <USB_CoreReset>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8004b8e:	e005      	b.n	8004b9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d10b      	bne.n	8004bba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f043 0206 	orr.w	r2, r3, #6
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f043 0220 	orr.w	r2, r3, #32
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bc6:	b004      	add	sp, #16
 8004bc8:	4770      	bx	lr

08004bca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f043 0201 	orr.w	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f023 0201 	bic.w	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	460b      	mov	r3, r1
 8004c18:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d106      	bne.n	8004c3a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	60da      	str	r2, [r3, #12]
 8004c38:	e00b      	b.n	8004c52 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d106      	bne.n	8004c4e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	60da      	str	r2, [r3, #12]
 8004c4c:	e001      	b.n	8004c52 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e003      	b.n	8004c5a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004c52:	2032      	movs	r0, #50	; 0x32
 8004c54:	f7fc fa1e 	bl	8001094 <HAL_Delay>

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	019b      	lsls	r3, r3, #6
 8004c76:	f043 0220 	orr.w	r2, r3, #32
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3301      	adds	r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <USB_FlushTxFifo+0x48>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d901      	bls.n	8004c90 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e006      	b.n	8004c9e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	d0f0      	beq.n	8004c7e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	00030d40 	.word	0x00030d40

08004cb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2210      	movs	r2, #16
 8004cc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <USB_FlushRxFifo+0x40>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d901      	bls.n	8004cd4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e006      	b.n	8004ce2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d0f0      	beq.n	8004cc2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	00030d40 	.word	0x00030d40

08004cf4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b089      	sub	sp, #36	; 0x24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	4611      	mov	r1, r2
 8004d00:	461a      	mov	r2, r3
 8004d02:	460b      	mov	r3, r1
 8004d04:	71fb      	strb	r3, [r7, #7]
 8004d06:	4613      	mov	r3, r2
 8004d08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004d12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d11a      	bne.n	8004d50 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d1a:	88bb      	ldrh	r3, [r7, #4]
 8004d1c:	3303      	adds	r3, #3
 8004d1e:	089b      	lsrs	r3, r3, #2
 8004d20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	e00f      	b.n	8004d48 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	031a      	lsls	r2, r3, #12
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d34:	461a      	mov	r2, r3
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	3304      	adds	r3, #4
 8004d40:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	3301      	adds	r3, #1
 8004d46:	61bb      	str	r3, [r7, #24]
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d3eb      	bcc.n	8004d28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3724      	adds	r7, #36	; 0x24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b089      	sub	sp, #36	; 0x24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004d74:	88fb      	ldrh	r3, [r7, #6]
 8004d76:	3303      	adds	r3, #3
 8004d78:	089b      	lsrs	r3, r3, #2
 8004d7a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	e00b      	b.n	8004d9a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	3304      	adds	r3, #4
 8004d92:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	3301      	adds	r3, #1
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d3ef      	bcc.n	8004d82 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004da2:	69fb      	ldr	r3, [r7, #28]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3724      	adds	r7, #36	; 0x24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f003 0301 	and.w	r3, r3, #1
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3301      	adds	r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4a13      	ldr	r2, [pc, #76]	; (8004e58 <USB_CoreReset+0x64>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d901      	bls.n	8004e12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e01b      	b.n	8004e4a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	daf2      	bge.n	8004e00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f043 0201 	orr.w	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4a09      	ldr	r2, [pc, #36]	; (8004e58 <USB_CoreReset+0x64>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d901      	bls.n	8004e3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e006      	b.n	8004e4a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d0f0      	beq.n	8004e2a <USB_CoreReset+0x36>

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	00030d40 	.word	0x00030d40

08004e5c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b084      	sub	sp, #16
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	f107 001c 	add.w	r0, r7, #28
 8004e6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d018      	beq.n	8004ee0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d10a      	bne.n	8004eca <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ec2:	f043 0304 	orr.w	r3, r3, #4
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	e014      	b.n	8004ef4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ed8:	f023 0304 	bic.w	r3, r3, #4
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e009      	b.n	8004ef4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004eee:	f023 0304 	bic.w	r3, r3, #4
 8004ef2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004ef4:	2110      	movs	r1, #16
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff feb4 	bl	8004c64 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff fed7 	bl	8004cb0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	e015      	b.n	8004f34 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f14:	461a      	mov	r2, r3
 8004f16:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f28:	461a      	mov	r2, r3
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3301      	adds	r3, #1
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d3e5      	bcc.n	8004f08 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f8ac 	bl	800509c <USB_DriveVbus>

  HAL_Delay(200U);
 8004f44:	20c8      	movs	r0, #200	; 0xc8
 8004f46:	f7fc f8a5 	bl	8001094 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f04f 32ff 	mov.w	r2, #4294967295
 8004f56:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00b      	beq.n	8004f7c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a14      	ldr	r2, [pc, #80]	; (8004fc0 <USB_HostInit+0x164>)
 8004f70:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a13      	ldr	r2, [pc, #76]	; (8004fc4 <USB_HostInit+0x168>)
 8004f76:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004f7a:	e009      	b.n	8004f90 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2280      	movs	r2, #128	; 0x80
 8004f80:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a10      	ldr	r2, [pc, #64]	; (8004fc8 <USB_HostInit+0x16c>)
 8004f86:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a10      	ldr	r2, [pc, #64]	; (8004fcc <USB_HostInit+0x170>)
 8004f8c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d105      	bne.n	8004fa2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f043 0210 	orr.w	r2, r3, #16
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <USB_HostInit+0x174>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fba:	b004      	add	sp, #16
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	01000200 	.word	0x01000200
 8004fc4:	00e00300 	.word	0x00e00300
 8004fc8:	00600080 	.word	0x00600080
 8004fcc:	004000e0 	.word	0x004000e0
 8004fd0:	a3200008 	.word	0xa3200008

08004fd4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	68f9      	ldr	r1, [r7, #12]
 8005008:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800500c:	4313      	orrs	r3, r2
 800500e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d107      	bne.n	8005026 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800501c:	461a      	mov	r2, r3
 800501e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005022:	6053      	str	r3, [r2, #4]
 8005024:	e009      	b.n	800503a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d106      	bne.n	800503a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005032:	461a      	mov	r2, r3
 8005034:	f241 7370 	movw	r3, #6000	; 0x1770
 8005038:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005068:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005076:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005078:	2064      	movs	r0, #100	; 0x64
 800507a:	f7fc f80b 	bl	8001094 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005086:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800508a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800508c:	200a      	movs	r0, #10
 800508e:	f7fc f801 	bl	8001094 <HAL_Delay>

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d109      	bne.n	80050e0 <USB_DriveVbus+0x44>
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d106      	bne.n	80050e0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050de:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ea:	d109      	bne.n	8005100 <USB_DriveVbus+0x64>
 80050ec:	78fb      	ldrb	r3, [r7, #3]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d106      	bne.n	8005100 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050fe:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	0c5b      	lsrs	r3, r3, #17
 800512c:	f003 0303 	and.w	r3, r3, #3
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	b29b      	uxth	r3, r3
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	4608      	mov	r0, r1
 800516a:	4611      	mov	r1, r2
 800516c:	461a      	mov	r2, r3
 800516e:	4603      	mov	r3, r0
 8005170:	70fb      	strb	r3, [r7, #3]
 8005172:	460b      	mov	r3, r1
 8005174:	70bb      	strb	r3, [r7, #2]
 8005176:	4613      	mov	r3, r2
 8005178:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005182:	78fb      	ldrb	r3, [r7, #3]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	4413      	add	r3, r2
 800518a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518e:	461a      	mov	r2, r3
 8005190:	f04f 33ff 	mov.w	r3, #4294967295
 8005194:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005196:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800519a:	2b03      	cmp	r3, #3
 800519c:	d87e      	bhi.n	800529c <USB_HC_Init+0x13c>
 800519e:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <USB_HC_Init+0x44>)
 80051a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a4:	080051b5 	.word	0x080051b5
 80051a8:	0800525f 	.word	0x0800525f
 80051ac:	080051b5 	.word	0x080051b5
 80051b0:	08005221 	.word	0x08005221
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051b4:	78fb      	ldrb	r3, [r7, #3]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c0:	461a      	mov	r2, r3
 80051c2:	f240 439d 	movw	r3, #1181	; 0x49d
 80051c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80051c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	da10      	bge.n	80051f2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	78fa      	ldrb	r2, [r7, #3]
 80051e0:	0151      	lsls	r1, r2, #5
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	440a      	add	r2, r1
 80051e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ee:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80051f0:	e057      	b.n	80052a2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d051      	beq.n	80052a2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80051fe:	78fb      	ldrb	r3, [r7, #3]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4413      	add	r3, r2
 8005206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	78fa      	ldrb	r2, [r7, #3]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	440a      	add	r2, r1
 8005214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005218:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800521c:	60d3      	str	r3, [r2, #12]
      break;
 800521e:	e040      	b.n	80052a2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4413      	add	r3, r2
 8005228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522c:	461a      	mov	r2, r3
 800522e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005232:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005234:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005238:	2b00      	cmp	r3, #0
 800523a:	da34      	bge.n	80052a6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4413      	add	r3, r2
 8005244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	78fa      	ldrb	r2, [r7, #3]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	440a      	add	r2, r1
 8005252:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800525a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800525c:	e023      	b.n	80052a6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	4413      	add	r3, r2
 8005266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526a:	461a      	mov	r2, r3
 800526c:	f240 2325 	movw	r3, #549	; 0x225
 8005270:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005272:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005276:	2b00      	cmp	r3, #0
 8005278:	da17      	bge.n	80052aa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	4413      	add	r3, r2
 8005282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	0151      	lsls	r1, r2, #5
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	440a      	add	r2, r1
 8005290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005294:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005298:	60d3      	str	r3, [r2, #12]
      }
      break;
 800529a:	e006      	b.n	80052aa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	75fb      	strb	r3, [r7, #23]
      break;
 80052a0:	e004      	b.n	80052ac <USB_HC_Init+0x14c>
      break;
 80052a2:	bf00      	nop
 80052a4:	e002      	b.n	80052ac <USB_HC_Init+0x14c>
      break;
 80052a6:	bf00      	nop
 80052a8:	e000      	b.n	80052ac <USB_HC_Init+0x14c>
      break;
 80052aa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052b2:	699a      	ldr	r2, [r3, #24]
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	2101      	movs	r1, #1
 80052bc:	fa01 f303 	lsl.w	r3, r1, r3
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052c6:	4313      	orrs	r3, r2
 80052c8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80052d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	da03      	bge.n	80052e6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80052de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	e001      	b.n	80052ea <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80052ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d103      	bne.n	80052fa <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80052f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e001      	b.n	80052fe <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052fe:	787b      	ldrb	r3, [r7, #1]
 8005300:	059b      	lsls	r3, r3, #22
 8005302:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005306:	78bb      	ldrb	r3, [r7, #2]
 8005308:	02db      	lsls	r3, r3, #11
 800530a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800530e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005310:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005314:	049b      	lsls	r3, r3, #18
 8005316:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800531a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800531c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800531e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005322:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	0159      	lsls	r1, r3, #5
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	440b      	add	r3, r1
 8005330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005334:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800533a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800533c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005340:	2b03      	cmp	r3, #3
 8005342:	d10f      	bne.n	8005364 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4413      	add	r3, r2
 800534c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	78fa      	ldrb	r2, [r7, #3]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	440a      	add	r2, r1
 800535a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800535e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005362:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005364:	7dfb      	ldrb	r3, [r7, #23]
}
 8005366:	4618      	mov	r0, r3
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop

08005374 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08c      	sub	sp, #48	; 0x30
 8005378:	af02      	add	r7, sp, #8
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	4613      	mov	r3, r2
 8005380:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	785b      	ldrb	r3, [r3, #1]
 800538a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800538c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005390:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539a:	2b00      	cmp	r3, #0
 800539c:	d028      	beq.n	80053f0 <USB_HC_StartXfer+0x7c>
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	791b      	ldrb	r3, [r3, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d124      	bne.n	80053f0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10b      	bne.n	80053c4 <USB_HC_StartXfer+0x50>
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	795b      	ldrb	r3, [r3, #5]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d107      	bne.n	80053c4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	785b      	ldrb	r3, [r3, #1]
 80053b8:	4619      	mov	r1, r3
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 fa2e 	bl	800581c <USB_DoPing>
      return HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	e112      	b.n	80055ea <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d112      	bne.n	80053f0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	0151      	lsls	r1, r2, #5
 80053dc:	6a3a      	ldr	r2, [r7, #32]
 80053de:	440a      	add	r2, r1
 80053e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053e4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80053e8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2200      	movs	r2, #0
 80053ee:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d018      	beq.n	800542a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	8912      	ldrh	r2, [r2, #8]
 8005400:	4413      	add	r3, r2
 8005402:	3b01      	subs	r3, #1
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	8912      	ldrh	r2, [r2, #8]
 8005408:	fbb3 f3f2 	udiv	r3, r3, r2
 800540c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800540e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005410:	8b7b      	ldrh	r3, [r7, #26]
 8005412:	429a      	cmp	r2, r3
 8005414:	d90b      	bls.n	800542e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005416:	8b7b      	ldrh	r3, [r7, #26]
 8005418:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800541a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	8912      	ldrh	r2, [r2, #8]
 8005420:	fb02 f203 	mul.w	r2, r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	611a      	str	r2, [r3, #16]
 8005428:	e001      	b.n	800542e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800542a:	2301      	movs	r3, #1
 800542c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	78db      	ldrb	r3, [r3, #3]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d006      	beq.n	8005444 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005436:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	8912      	ldrh	r2, [r2, #8]
 800543c:	fb02 f203 	mul.w	r2, r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800544c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800544e:	04d9      	lsls	r1, r3, #19
 8005450:	4b68      	ldr	r3, [pc, #416]	; (80055f4 <USB_HC_StartXfer+0x280>)
 8005452:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005454:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	7a9b      	ldrb	r3, [r3, #10]
 800545a:	075b      	lsls	r3, r3, #29
 800545c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005460:	69f9      	ldr	r1, [r7, #28]
 8005462:	0148      	lsls	r0, r1, #5
 8005464:	6a39      	ldr	r1, [r7, #32]
 8005466:	4401      	add	r1, r0
 8005468:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800546c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800546e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d009      	beq.n	800548a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	68d9      	ldr	r1, [r3, #12]
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	4413      	add	r3, r2
 8005482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005486:	460a      	mov	r2, r1
 8005488:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	bf0c      	ite	eq
 800549a:	2301      	moveq	r3, #1
 800549c:	2300      	movne	r3, #0
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	6a3a      	ldr	r2, [r7, #32]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80054c0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	7e7b      	ldrb	r3, [r7, #25]
 80054d2:	075b      	lsls	r3, r3, #29
 80054d4:	69f9      	ldr	r1, [r7, #28]
 80054d6:	0148      	lsls	r0, r1, #5
 80054d8:	6a39      	ldr	r1, [r7, #32]
 80054da:	4401      	add	r1, r0
 80054dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80054e0:	4313      	orrs	r3, r2
 80054e2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a41      	ldr	r2, [pc, #260]	; (80055f8 <USB_HC_StartXfer+0x284>)
 80054f4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054f6:	4b40      	ldr	r3, [pc, #256]	; (80055f8 <USB_HC_StartXfer+0x284>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054fe:	4a3e      	ldr	r2, [pc, #248]	; (80055f8 <USB_HC_StartXfer+0x284>)
 8005500:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	78db      	ldrb	r3, [r3, #3]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d006      	beq.n	8005518 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800550a:	4b3b      	ldr	r3, [pc, #236]	; (80055f8 <USB_HC_StartXfer+0x284>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005512:	4a39      	ldr	r2, [pc, #228]	; (80055f8 <USB_HC_StartXfer+0x284>)
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	e005      	b.n	8005524 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005518:	4b37      	ldr	r3, [pc, #220]	; (80055f8 <USB_HC_StartXfer+0x284>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005520:	4a35      	ldr	r2, [pc, #212]	; (80055f8 <USB_HC_StartXfer+0x284>)
 8005522:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005524:	4b34      	ldr	r3, [pc, #208]	; (80055f8 <USB_HC_StartXfer+0x284>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800552c:	4a32      	ldr	r2, [pc, #200]	; (80055f8 <USB_HC_StartXfer+0x284>)
 800552e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	4413      	add	r3, r2
 8005538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553c:	461a      	mov	r2, r3
 800553e:	4b2e      	ldr	r3, [pc, #184]	; (80055f8 <USB_HC_StartXfer+0x284>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d14e      	bne.n	80055e8 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	78db      	ldrb	r3, [r3, #3]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d14a      	bne.n	80055e8 <USB_HC_StartXfer+0x274>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d046      	beq.n	80055e8 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	79db      	ldrb	r3, [r3, #7]
 800555e:	2b03      	cmp	r3, #3
 8005560:	d830      	bhi.n	80055c4 <USB_HC_StartXfer+0x250>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <USB_HC_StartXfer+0x1f4>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	08005579 	.word	0x08005579
 800556c:	0800559d 	.word	0x0800559d
 8005570:	08005579 	.word	0x08005579
 8005574:	0800559d 	.word	0x0800559d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	3303      	adds	r3, #3
 800557e:	089b      	lsrs	r3, r3, #2
 8005580:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005582:	8afa      	ldrh	r2, [r7, #22]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	b29b      	uxth	r3, r3
 800558a:	429a      	cmp	r2, r3
 800558c:	d91c      	bls.n	80055c8 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	f043 0220 	orr.w	r2, r3, #32
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	619a      	str	r2, [r3, #24]
          }
          break;
 800559a:	e015      	b.n	80055c8 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	3303      	adds	r3, #3
 80055a2:	089b      	lsrs	r3, r3, #2
 80055a4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80055a6:	8afa      	ldrh	r2, [r7, #22]
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d90a      	bls.n	80055cc <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	619a      	str	r2, [r3, #24]
          }
          break;
 80055c2:	e003      	b.n	80055cc <USB_HC_StartXfer+0x258>

        default:
          break;
 80055c4:	bf00      	nop
 80055c6:	e002      	b.n	80055ce <USB_HC_StartXfer+0x25a>
          break;
 80055c8:	bf00      	nop
 80055ca:	e000      	b.n	80055ce <USB_HC_StartXfer+0x25a>
          break;
 80055cc:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	68d9      	ldr	r1, [r3, #12]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	785a      	ldrb	r2, [r3, #1]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	b298      	uxth	r0, r3
 80055dc:	2300      	movs	r3, #0
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	4603      	mov	r3, r0
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff fb86 	bl	8004cf4 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3728      	adds	r7, #40	; 0x28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	1ff80000 	.word	0x1ff80000
 80055f8:	200000c4 	.word	0x200000c4

080055fc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	b29b      	uxth	r3, r3
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800561e:	b480      	push	{r7}
 8005620:	b087      	sub	sp, #28
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	460b      	mov	r3, r1
 8005628:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	4413      	add	r3, r2
 800563e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	0c9b      	lsrs	r3, r3, #18
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <USB_HC_Halt+0x3a>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d16c      	bne.n	8005732 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	4413      	add	r3, r2
 8005660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	440a      	add	r2, r1
 800566e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005672:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005676:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d143      	bne.n	800570c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	4413      	add	r3, r2
 800568c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	0151      	lsls	r1, r2, #5
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	440a      	add	r2, r1
 800569a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800569e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	0151      	lsls	r1, r2, #5
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	440a      	add	r2, r1
 80056ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	0151      	lsls	r1, r2, #5
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	440a      	add	r2, r1
 80056da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056e2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	3301      	adds	r3, #1
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056f0:	d81d      	bhi.n	800572e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005708:	d0ec      	beq.n	80056e4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800570a:	e080      	b.n	800580e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4413      	add	r3, r2
 8005714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	440a      	add	r2, r1
 8005722:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005726:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800572a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800572c:	e06f      	b.n	800580e <USB_HC_Halt+0x1f0>
          break;
 800572e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005730:	e06d      	b.n	800580e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4413      	add	r3, r2
 800573a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	0151      	lsls	r1, r2, #5
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	440a      	add	r2, r1
 8005748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800574c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005750:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d143      	bne.n	80057ea <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	4413      	add	r3, r2
 800576a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	440a      	add	r2, r1
 8005778:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800577c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005780:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	4413      	add	r3, r2
 800578a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	440a      	add	r2, r1
 8005798:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800579c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057a0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	0151      	lsls	r1, r2, #5
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	440a      	add	r2, r1
 80057b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057c0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	3301      	adds	r3, #1
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057ce:	d81d      	bhi.n	800580c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057e6:	d0ec      	beq.n	80057c2 <USB_HC_Halt+0x1a4>
 80057e8:	e011      	b.n	800580e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005804:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	e000      	b.n	800580e <USB_HC_Halt+0x1f0>
          break;
 800580c:	bf00      	nop
    }
  }

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005830:	2301      	movs	r3, #1
 8005832:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	04da      	lsls	r2, r3, #19
 8005838:	4b15      	ldr	r3, [pc, #84]	; (8005890 <USB_DoPing+0x74>)
 800583a:	4013      	ands	r3, r2
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	440a      	add	r2, r1
 8005844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800584c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	4413      	add	r3, r2
 8005856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005864:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800586c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	4413      	add	r3, r2
 8005876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587a:	461a      	mov	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	1ff80000 	.word	0x1ff80000

08005894 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff f9a1 	bl	8004bec <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80058aa:	2110      	movs	r1, #16
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff f9d9 	bl	8004c64 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff f9fc 	bl	8004cb0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80058b8:	2300      	movs	r3, #0
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	e01f      	b.n	80058fe <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058d4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058e4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f2:	461a      	mov	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	3301      	adds	r3, #1
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b0f      	cmp	r3, #15
 8005902:	d9dc      	bls.n	80058be <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005904:	2300      	movs	r3, #0
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	e034      	b.n	8005974 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4413      	add	r3, r2
 8005912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005920:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005928:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005930:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593e:	461a      	mov	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	3301      	adds	r3, #1
 8005948:	617b      	str	r3, [r7, #20]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005950:	d80c      	bhi.n	800596c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4413      	add	r3, r2
 800595a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005968:	d0ec      	beq.n	8005944 <USB_StopHost+0xb0>
 800596a:	e000      	b.n	800596e <USB_StopHost+0xda>
        break;
 800596c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	3301      	adds	r3, #1
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2b0f      	cmp	r3, #15
 8005978:	d9c7      	bls.n	800590a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005980:	461a      	mov	r2, r3
 8005982:	f04f 33ff 	mov.w	r3, #4294967295
 8005986:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f04f 32ff 	mov.w	r2, #4294967295
 800598e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff f91a 	bl	8004bca <USB_EnableGlobalInt>

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80059a0:	b590      	push	{r4, r7, lr}
 80059a2:	b089      	sub	sp, #36	; 0x24
 80059a4:	af04      	add	r7, sp, #16
 80059a6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80059a8:	2301      	movs	r3, #1
 80059aa:	2202      	movs	r2, #2
 80059ac:	2102      	movs	r1, #2
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fc68 	bl	8006284 <USBH_FindInterface>
 80059b4:	4603      	mov	r3, r0
 80059b6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	2bff      	cmp	r3, #255	; 0xff
 80059bc:	d002      	beq.n	80059c4 <USBH_CDC_InterfaceInit+0x24>
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d901      	bls.n	80059c8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80059c4:	2302      	movs	r3, #2
 80059c6:	e13d      	b.n	8005c44 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fc3d 	bl	800624c <USBH_SelectInterface>
 80059d2:	4603      	mov	r3, r0
 80059d4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80059d6:	7bbb      	ldrb	r3, [r7, #14]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80059dc:	2302      	movs	r3, #2
 80059de:	e131      	b.n	8005c44 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80059e6:	2050      	movs	r0, #80	; 0x50
 80059e8:	f002 fa04 	bl	8007df4 <malloc>
 80059ec:	4603      	mov	r3, r0
 80059ee:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005a00:	2302      	movs	r3, #2
 8005a02:	e11f      	b.n	8005c44 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005a04:	2250      	movs	r2, #80	; 0x50
 8005a06:	2100      	movs	r1, #0
 8005a08:	68b8      	ldr	r0, [r7, #8]
 8005a0a:	f002 fa03 	bl	8007e14 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	211a      	movs	r1, #26
 8005a14:	fb01 f303 	mul.w	r3, r1, r3
 8005a18:	4413      	add	r3, r2
 8005a1a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	b25b      	sxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	da15      	bge.n	8005a52 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	211a      	movs	r1, #26
 8005a2c:	fb01 f303 	mul.w	r3, r1, r3
 8005a30:	4413      	add	r3, r2
 8005a32:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a36:	781a      	ldrb	r2, [r3, #0]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	211a      	movs	r1, #26
 8005a42:	fb01 f303 	mul.w	r3, r1, r3
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005a4c:	881a      	ldrh	r2, [r3, #0]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	785b      	ldrb	r3, [r3, #1]
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f001 fe36 	bl	80076ca <USBH_AllocPipe>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	461a      	mov	r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	7819      	ldrb	r1, [r3, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	7858      	ldrb	r0, [r3, #1]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	8952      	ldrh	r2, [r2, #10]
 8005a7e:	9202      	str	r2, [sp, #8]
 8005a80:	2203      	movs	r2, #3
 8005a82:	9201      	str	r2, [sp, #4]
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	4623      	mov	r3, r4
 8005a88:	4602      	mov	r2, r0
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f001 fdee 	bl	800766c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2200      	movs	r2, #0
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f002 f8fb 	bl	8007c94 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	210a      	movs	r1, #10
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fbed 	bl	8006284 <USBH_FindInterface>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	2bff      	cmp	r3, #255	; 0xff
 8005ab2:	d002      	beq.n	8005aba <USBH_CDC_InterfaceInit+0x11a>
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d901      	bls.n	8005abe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005aba:	2302      	movs	r3, #2
 8005abc:	e0c2      	b.n	8005c44 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	211a      	movs	r1, #26
 8005ac4:	fb01 f303 	mul.w	r3, r1, r3
 8005ac8:	4413      	add	r3, r2
 8005aca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	b25b      	sxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	da16      	bge.n	8005b04 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	211a      	movs	r1, #26
 8005adc:	fb01 f303 	mul.w	r3, r1, r3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ae6:	781a      	ldrb	r2, [r3, #0]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	211a      	movs	r1, #26
 8005af2:	fb01 f303 	mul.w	r3, r1, r3
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005afc:	881a      	ldrh	r2, [r3, #0]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	835a      	strh	r2, [r3, #26]
 8005b02:	e015      	b.n	8005b30 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	211a      	movs	r1, #26
 8005b0a:	fb01 f303 	mul.w	r3, r1, r3
 8005b0e:	4413      	add	r3, r2
 8005b10:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b14:	781a      	ldrb	r2, [r3, #0]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	211a      	movs	r1, #26
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b2a:	881a      	ldrh	r2, [r3, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	211a      	movs	r1, #26
 8005b36:	fb01 f303 	mul.w	r3, r1, r3
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	b25b      	sxtb	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	da16      	bge.n	8005b76 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	211a      	movs	r1, #26
 8005b4e:	fb01 f303 	mul.w	r3, r1, r3
 8005b52:	4413      	add	r3, r2
 8005b54:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b58:	781a      	ldrb	r2, [r3, #0]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	211a      	movs	r1, #26
 8005b64:	fb01 f303 	mul.w	r3, r1, r3
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005b6e:	881a      	ldrh	r2, [r3, #0]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	835a      	strh	r2, [r3, #26]
 8005b74:	e015      	b.n	8005ba2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	211a      	movs	r1, #26
 8005b7c:	fb01 f303 	mul.w	r3, r1, r3
 8005b80:	4413      	add	r3, r2
 8005b82:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b86:	781a      	ldrb	r2, [r3, #0]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	211a      	movs	r1, #26
 8005b92:	fb01 f303 	mul.w	r3, r1, r3
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005b9c:	881a      	ldrh	r2, [r3, #0]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	7b9b      	ldrb	r3, [r3, #14]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f001 fd8e 	bl	80076ca <USBH_AllocPipe>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	7bdb      	ldrb	r3, [r3, #15]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f001 fd84 	bl	80076ca <USBH_AllocPipe>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	7b59      	ldrb	r1, [r3, #13]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	7b98      	ldrb	r0, [r3, #14]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	8b12      	ldrh	r2, [r2, #24]
 8005be2:	9202      	str	r2, [sp, #8]
 8005be4:	2202      	movs	r2, #2
 8005be6:	9201      	str	r2, [sp, #4]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	4623      	mov	r3, r4
 8005bec:	4602      	mov	r2, r0
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f001 fd3c 	bl	800766c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	7b19      	ldrb	r1, [r3, #12]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	7bd8      	ldrb	r0, [r3, #15]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	8b52      	ldrh	r2, [r2, #26]
 8005c0c:	9202      	str	r2, [sp, #8]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	9201      	str	r2, [sp, #4]
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	4623      	mov	r3, r4
 8005c16:	4602      	mov	r2, r0
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 fd27 	bl	800766c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	7b5b      	ldrb	r3, [r3, #13]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f002 f830 	bl	8007c94 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	7b1b      	ldrb	r3, [r3, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f002 f829 	bl	8007c94 <USBH_LL_SetToggle>

  return USBH_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd90      	pop	{r4, r7, pc}

08005c4c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00e      	beq.n	8005c84 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f001 fd1c 	bl	80076aa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f001 fd47 	bl	800770c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	7b1b      	ldrb	r3, [r3, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00e      	beq.n	8005caa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	7b1b      	ldrb	r3, [r3, #12]
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f001 fd09 	bl	80076aa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	7b1b      	ldrb	r3, [r3, #12]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f001 fd34 	bl	800770c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	7b5b      	ldrb	r3, [r3, #13]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00e      	beq.n	8005cd0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	7b5b      	ldrb	r3, [r3, #13]
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f001 fcf6 	bl	80076aa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	7b5b      	ldrb	r3, [r3, #13]
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f001 fd21 	bl	800770c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00b      	beq.n	8005cf4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f002 f88d 	bl	8007e04 <free>
    phost->pActiveClass->pData = 0U;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3340      	adds	r3, #64	; 0x40
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f8b1 	bl	8005e7e <GetLineCoding>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005d20:	7afb      	ldrb	r3, [r7, #11]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d105      	bne.n	8005d32 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d2c:	2102      	movs	r1, #2
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005d32:	7afb      	ldrb	r3, [r7, #11]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005d44:	2301      	movs	r3, #1
 8005d46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d877      	bhi.n	8005e50 <USBH_CDC_Process+0x114>
 8005d60:	a201      	add	r2, pc, #4	; (adr r2, 8005d68 <USBH_CDC_Process+0x2c>)
 8005d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d66:	bf00      	nop
 8005d68:	08005d7d 	.word	0x08005d7d
 8005d6c:	08005d83 	.word	0x08005d83
 8005d70:	08005db3 	.word	0x08005db3
 8005d74:	08005e27 	.word	0x08005e27
 8005d78:	08005e35 	.word	0x08005e35
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d80:	e06d      	b.n	8005e5e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d86:	4619      	mov	r1, r3
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f897 	bl	8005ebc <SetLineCoding>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005d92:	7bbb      	ldrb	r3, [r7, #14]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d104      	bne.n	8005da2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005da0:	e058      	b.n	8005e54 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005da2:	7bbb      	ldrb	r3, [r7, #14]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d055      	beq.n	8005e54 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2204      	movs	r2, #4
 8005dac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005db0:	e050      	b.n	8005e54 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	3340      	adds	r3, #64	; 0x40
 8005db6:	4619      	mov	r1, r3
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f860 	bl	8005e7e <GetLineCoding>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005dc2:	7bbb      	ldrb	r3, [r7, #14]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d126      	bne.n	8005e16 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dda:	791b      	ldrb	r3, [r3, #4]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d13b      	bne.n	8005e58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dea:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d133      	bne.n	8005e58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dfa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d12b      	bne.n	8005e58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e08:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d124      	bne.n	8005e58 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f95a 	bl	80060c8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005e14:	e020      	b.n	8005e58 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005e16:	7bbb      	ldrb	r3, [r7, #14]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d01d      	beq.n	8005e58 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2204      	movs	r2, #4
 8005e20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005e24:	e018      	b.n	8005e58 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f867 	bl	8005efa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f8dc 	bl	8005fea <CDC_ProcessReception>
      break;
 8005e32:	e014      	b.n	8005e5e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005e34:	2100      	movs	r1, #0
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 ffe5 	bl	8006e06 <USBH_ClrFeature>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005e40:	7bbb      	ldrb	r3, [r7, #14]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005e4e:	e005      	b.n	8005e5c <USBH_CDC_Process+0x120>

    default:
      break;
 8005e50:	bf00      	nop
 8005e52:	e004      	b.n	8005e5e <USBH_CDC_Process+0x122>
      break;
 8005e54:	bf00      	nop
 8005e56:	e002      	b.n	8005e5e <USBH_CDC_Process+0x122>
      break;
 8005e58:	bf00      	nop
 8005e5a:	e000      	b.n	8005e5e <USBH_CDC_Process+0x122>
      break;
 8005e5c:	bf00      	nop

  }

  return status;
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	22a1      	movs	r2, #161	; 0xa1
 8005e8c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2221      	movs	r2, #33	; 0x21
 8005e92:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2207      	movs	r2, #7
 8005ea4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2207      	movs	r2, #7
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f001 f98a 	bl	80071c6 <USBH_CtlReq>
 8005eb2:	4603      	mov	r3, r0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2221      	movs	r2, #33	; 0x21
 8005eca:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2207      	movs	r2, #7
 8005ee2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2207      	movs	r2, #7
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f001 f96b 	bl	80071c6 <USBH_CtlReq>
 8005ef0:	4603      	mov	r3, r0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b086      	sub	sp, #24
 8005efe:	af02      	add	r7, sp, #8
 8005f00:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d002      	beq.n	8005f20 <CDC_ProcessTransmission+0x26>
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d025      	beq.n	8005f6a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8005f1e:	e060      	b.n	8005fe2 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	8b12      	ldrh	r2, [r2, #24]
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d90c      	bls.n	8005f46 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	69d9      	ldr	r1, [r3, #28]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8b1a      	ldrh	r2, [r3, #24]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	7b58      	ldrb	r0, [r3, #13]
 8005f38:	2301      	movs	r3, #1
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f001 fb51 	bl	80075e6 <USBH_BulkSendData>
 8005f44:	e00c      	b.n	8005f60 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	7b58      	ldrb	r0, [r3, #13]
 8005f54:	2301      	movs	r3, #1
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	4603      	mov	r3, r0
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f001 fb43 	bl	80075e6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005f68:	e03b      	b.n	8005fe2 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	7b5b      	ldrb	r3, [r3, #13]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f001 fe65 	bl	8007c40 <USBH_LL_GetURBState>
 8005f76:	4603      	mov	r3, r0
 8005f78:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005f7a:	7afb      	ldrb	r3, [r7, #11]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d128      	bne.n	8005fd2 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	8b12      	ldrh	r2, [r2, #24]
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d90e      	bls.n	8005faa <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	8b12      	ldrh	r2, [r2, #24]
 8005f94:	1a9a      	subs	r2, r3, r2
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	8b12      	ldrh	r2, [r2, #24]
 8005fa2:	441a      	add	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	61da      	str	r2, [r3, #28]
 8005fa8:	e002      	b.n	8005fb0 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005fc0:	e00e      	b.n	8005fe0 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f868 	bl	80060a0 <USBH_CDC_TransmitCallback>
      break;
 8005fd0:	e006      	b.n	8005fe0 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8005fd2:	7afb      	ldrb	r3, [r7, #11]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d103      	bne.n	8005fe0 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005fe0:	bf00      	nop
  }
}
 8005fe2:	bf00      	nop
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b086      	sub	sp, #24
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006006:	2b03      	cmp	r3, #3
 8006008:	d002      	beq.n	8006010 <CDC_ProcessReception+0x26>
 800600a:	2b04      	cmp	r3, #4
 800600c:	d00e      	beq.n	800602c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800600e:	e043      	b.n	8006098 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	6a19      	ldr	r1, [r3, #32]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	8b5a      	ldrh	r2, [r3, #26]
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	7b1b      	ldrb	r3, [r3, #12]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f001 fb07 	bl	8007630 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2204      	movs	r2, #4
 8006026:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800602a:	e035      	b.n	8006098 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	7b1b      	ldrb	r3, [r3, #12]
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f001 fe04 	bl	8007c40 <USBH_LL_GetURBState>
 8006038:	4603      	mov	r3, r0
 800603a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800603c:	7cfb      	ldrb	r3, [r7, #19]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d129      	bne.n	8006096 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	7b1b      	ldrb	r3, [r3, #12]
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 fd67 	bl	8007b1c <USBH_LL_GetLastXferSize>
 800604e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	429a      	cmp	r2, r3
 8006058:	d016      	beq.n	8006088 <CDC_ProcessReception+0x9e>
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	8b5b      	ldrh	r3, [r3, #26]
 800605e:	461a      	mov	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4293      	cmp	r3, r2
 8006064:	d910      	bls.n	8006088 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1ad2      	subs	r2, r2, r3
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	6a1a      	ldr	r2, [r3, #32]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	441a      	add	r2, r3
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2203      	movs	r2, #3
 8006082:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006086:	e006      	b.n	8006096 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f80f 	bl	80060b4 <USBH_CDC_ReceiveCallback>
      break;
 8006096:	bf00      	nop
  }
}
 8006098:	bf00      	nop
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	4613      	mov	r3, r2
 80060e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80060f0:	2302      	movs	r3, #2
 80060f2:	e029      	b.n	8006148 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	79fa      	ldrb	r2, [r7, #7]
 80060f8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 f81f 	bl	8006150 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f001 fc39 	bl	80079b8 <USBH_LL_Init>

  return USBH_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800615c:	2300      	movs	r3, #0
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	e009      	b.n	8006176 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	33e0      	adds	r3, #224	; 0xe0
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	2200      	movs	r2, #0
 800616e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3301      	adds	r3, #1
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b0e      	cmp	r3, #14
 800617a:	d9f2      	bls.n	8006162 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800617c:	2300      	movs	r3, #0
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	e009      	b.n	8006196 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800618c:	2200      	movs	r2, #0
 800618e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3301      	adds	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800619c:	d3f1      	bcc.n	8006182 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2240      	movs	r2, #64	; 0x40
 80061c2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d016      	beq.n	800623a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10e      	bne.n	8006234 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800621c:	1c59      	adds	r1, r3, #1
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	33de      	adds	r3, #222	; 0xde
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]
 8006232:	e004      	b.n	800623e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006234:	2302      	movs	r3, #2
 8006236:	73fb      	strb	r3, [r7, #15]
 8006238:	e001      	b.n	800623e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800623a:	2302      	movs	r3, #2
 800623c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800623e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006262:	78fa      	ldrb	r2, [r7, #3]
 8006264:	429a      	cmp	r2, r3
 8006266:	d204      	bcs.n	8006272 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	78fa      	ldrb	r2, [r7, #3]
 800626c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006270:	e001      	b.n	8006276 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006272:	2302      	movs	r3, #2
 8006274:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006276:	7bfb      	ldrb	r3, [r7, #15]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	4608      	mov	r0, r1
 800628e:	4611      	mov	r1, r2
 8006290:	461a      	mov	r2, r3
 8006292:	4603      	mov	r3, r0
 8006294:	70fb      	strb	r3, [r7, #3]
 8006296:	460b      	mov	r3, r1
 8006298:	70bb      	strb	r3, [r7, #2]
 800629a:	4613      	mov	r3, r2
 800629c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80062ac:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80062ae:	e025      	b.n	80062fc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	221a      	movs	r2, #26
 80062b4:	fb02 f303 	mul.w	r3, r2, r3
 80062b8:	3308      	adds	r3, #8
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4413      	add	r3, r2
 80062be:	3302      	adds	r3, #2
 80062c0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	795b      	ldrb	r3, [r3, #5]
 80062c6:	78fa      	ldrb	r2, [r7, #3]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d002      	beq.n	80062d2 <USBH_FindInterface+0x4e>
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	2bff      	cmp	r3, #255	; 0xff
 80062d0:	d111      	bne.n	80062f6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80062d6:	78ba      	ldrb	r2, [r7, #2]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d002      	beq.n	80062e2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80062dc:	78bb      	ldrb	r3, [r7, #2]
 80062de:	2bff      	cmp	r3, #255	; 0xff
 80062e0:	d109      	bne.n	80062f6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80062e6:	787a      	ldrb	r2, [r7, #1]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d002      	beq.n	80062f2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80062ec:	787b      	ldrb	r3, [r7, #1]
 80062ee:	2bff      	cmp	r3, #255	; 0xff
 80062f0:	d101      	bne.n	80062f6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	e006      	b.n	8006304 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	3301      	adds	r3, #1
 80062fa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d9d6      	bls.n	80062b0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006302:	23ff      	movs	r3, #255	; 0xff
}
 8006304:	4618      	mov	r0, r3
 8006306:	371c      	adds	r7, #28
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f001 fb89 	bl	8007a30 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800631e:	2101      	movs	r1, #1
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f001 fca0 	bl	8007c66 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b088      	sub	sp, #32
 8006334:	af04      	add	r7, sp, #16
 8006336:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006338:	2302      	movs	r3, #2
 800633a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b01      	cmp	r3, #1
 800634a:	d102      	bne.n	8006352 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2203      	movs	r2, #3
 8006350:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b0b      	cmp	r3, #11
 800635a:	f200 81b3 	bhi.w	80066c4 <USBH_Process+0x394>
 800635e:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <USBH_Process+0x34>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	08006395 	.word	0x08006395
 8006368:	080063c7 	.word	0x080063c7
 800636c:	0800642f 	.word	0x0800642f
 8006370:	0800665f 	.word	0x0800665f
 8006374:	080066c5 	.word	0x080066c5
 8006378:	080064d3 	.word	0x080064d3
 800637c:	08006605 	.word	0x08006605
 8006380:	08006509 	.word	0x08006509
 8006384:	08006529 	.word	0x08006529
 8006388:	08006549 	.word	0x08006549
 800638c:	08006577 	.word	0x08006577
 8006390:	08006647 	.word	0x08006647
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 8193 	beq.w	80066c8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80063a8:	20c8      	movs	r0, #200	; 0xc8
 80063aa:	f001 fca6 	bl	8007cfa <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 fb99 	bl	8007ae6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80063c4:	e180      	b.n	80066c8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d107      	bne.n	80063e0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80063de:	e182      	b.n	80066e6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80063e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063ea:	d914      	bls.n	8006416 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80063f2:	3301      	adds	r3, #1
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006402:	2b03      	cmp	r3, #3
 8006404:	d903      	bls.n	800640e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	220d      	movs	r2, #13
 800640a:	701a      	strb	r2, [r3, #0]
      break;
 800640c:	e16b      	b.n	80066e6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	701a      	strb	r2, [r3, #0]
      break;
 8006414:	e167      	b.n	80066e6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800641c:	f103 020a 	add.w	r2, r3, #10
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006426:	200a      	movs	r0, #10
 8006428:	f001 fc67 	bl	8007cfa <USBH_Delay>
      break;
 800642c:	e15b      	b.n	80066e6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800643e:	2104      	movs	r1, #4
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006444:	2064      	movs	r0, #100	; 0x64
 8006446:	f001 fc58 	bl	8007cfa <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 fb26 	bl	8007a9c <USBH_LL_GetSpeed>
 8006450:	4603      	mov	r3, r0
 8006452:	461a      	mov	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2205      	movs	r2, #5
 800645e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006460:	2100      	movs	r1, #0
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f001 f931 	bl	80076ca <USBH_AllocPipe>
 8006468:	4603      	mov	r3, r0
 800646a:	461a      	mov	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006470:	2180      	movs	r1, #128	; 0x80
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 f929 	bl	80076ca <USBH_AllocPipe>
 8006478:	4603      	mov	r3, r0
 800647a:	461a      	mov	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	7919      	ldrb	r1, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006494:	b292      	uxth	r2, r2
 8006496:	9202      	str	r2, [sp, #8]
 8006498:	2200      	movs	r2, #0
 800649a:	9201      	str	r2, [sp, #4]
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	4603      	mov	r3, r0
 80064a0:	2280      	movs	r2, #128	; 0x80
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f001 f8e2 	bl	800766c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	7959      	ldrb	r1, [r3, #5]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80064bc:	b292      	uxth	r2, r2
 80064be:	9202      	str	r2, [sp, #8]
 80064c0:	2200      	movs	r2, #0
 80064c2:	9201      	str	r2, [sp, #4]
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	4603      	mov	r3, r0
 80064c8:	2200      	movs	r2, #0
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f001 f8ce 	bl	800766c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80064d0:	e109      	b.n	80066e6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f90c 	bl	80066f0 <USBH_HandleEnum>
 80064d8:	4603      	mov	r3, r0
 80064da:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80064dc:	7bbb      	ldrb	r3, [r7, #14]
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f040 80f3 	bne.w	80066cc <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d103      	bne.n	8006500 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2208      	movs	r2, #8
 80064fc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80064fe:	e0e5      	b.n	80066cc <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2207      	movs	r2, #7
 8006504:	701a      	strb	r2, [r3, #0]
      break;
 8006506:	e0e1      	b.n	80066cc <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 80de 	beq.w	80066d0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800651a:	2101      	movs	r1, #1
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2208      	movs	r2, #8
 8006524:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006526:	e0d3      	b.n	80066d0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800652e:	b29b      	uxth	r3, r3
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fc20 	bl	8006d78 <USBH_SetCfg>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	f040 80ca 	bne.w	80066d4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2209      	movs	r2, #9
 8006544:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006546:	e0c5      	b.n	80066d4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00b      	beq.n	800656e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006556:	2101      	movs	r1, #1
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fc30 	bl	8006dbe <USBH_SetFeature>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	f040 80b9 	bne.w	80066d8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	220a      	movs	r2, #10
 800656a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800656c:	e0b4      	b.n	80066d8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	220a      	movs	r2, #10
 8006572:	701a      	strb	r2, [r3, #0]
      break;
 8006574:	e0b0      	b.n	80066d8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 80ad 	beq.w	80066dc <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800658a:	2300      	movs	r3, #0
 800658c:	73fb      	strb	r3, [r7, #15]
 800658e:	e016      	b.n	80065be <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006590:	7bfa      	ldrb	r2, [r7, #15]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	32de      	adds	r2, #222	; 0xde
 8006596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659a:	791a      	ldrb	r2, [r3, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d108      	bne.n	80065b8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80065a6:	7bfa      	ldrb	r2, [r7, #15]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	32de      	adds	r2, #222	; 0xde
 80065ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80065b6:	e005      	b.n	80065c4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
 80065ba:	3301      	adds	r3, #1
 80065bc:	73fb      	strb	r3, [r7, #15]
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0e5      	beq.n	8006590 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d016      	beq.n	80065fc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	4798      	blx	r3
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d109      	bne.n	80065f4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2206      	movs	r2, #6
 80065e4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065ec:	2103      	movs	r1, #3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80065f2:	e073      	b.n	80066dc <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	220d      	movs	r2, #13
 80065f8:	701a      	strb	r2, [r3, #0]
      break;
 80065fa:	e06f      	b.n	80066dc <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	220d      	movs	r2, #13
 8006600:	701a      	strb	r2, [r3, #0]
      break;
 8006602:	e06b      	b.n	80066dc <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800660a:	2b00      	cmp	r3, #0
 800660c:	d017      	beq.n	800663e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	4798      	blx	r3
 800661a:	4603      	mov	r3, r0
 800661c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800661e:	7bbb      	ldrb	r3, [r7, #14]
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d103      	bne.n	800662e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	220b      	movs	r2, #11
 800662a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800662c:	e058      	b.n	80066e0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800662e:	7bbb      	ldrb	r3, [r7, #14]
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d154      	bne.n	80066e0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	220d      	movs	r2, #13
 800663a:	701a      	strb	r2, [r3, #0]
      break;
 800663c:	e050      	b.n	80066e0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	220d      	movs	r2, #13
 8006642:	701a      	strb	r2, [r3, #0]
      break;
 8006644:	e04c      	b.n	80066e0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800664c:	2b00      	cmp	r3, #0
 800664e:	d049      	beq.n	80066e4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	4798      	blx	r3
      }
      break;
 800665c:	e042      	b.n	80066e4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7ff fd72 	bl	8006150 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d009      	beq.n	800668a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d005      	beq.n	80066a0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800669a:	2105      	movs	r1, #5
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d107      	bne.n	80066bc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff fe2b 	bl	8006310 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80066ba:	e014      	b.n	80066e6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f001 f9b7 	bl	8007a30 <USBH_LL_Start>
      break;
 80066c2:	e010      	b.n	80066e6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80066c4:	bf00      	nop
 80066c6:	e00e      	b.n	80066e6 <USBH_Process+0x3b6>
      break;
 80066c8:	bf00      	nop
 80066ca:	e00c      	b.n	80066e6 <USBH_Process+0x3b6>
      break;
 80066cc:	bf00      	nop
 80066ce:	e00a      	b.n	80066e6 <USBH_Process+0x3b6>
    break;
 80066d0:	bf00      	nop
 80066d2:	e008      	b.n	80066e6 <USBH_Process+0x3b6>
      break;
 80066d4:	bf00      	nop
 80066d6:	e006      	b.n	80066e6 <USBH_Process+0x3b6>
      break;
 80066d8:	bf00      	nop
 80066da:	e004      	b.n	80066e6 <USBH_Process+0x3b6>
      break;
 80066dc:	bf00      	nop
 80066de:	e002      	b.n	80066e6 <USBH_Process+0x3b6>
      break;
 80066e0:	bf00      	nop
 80066e2:	e000      	b.n	80066e6 <USBH_Process+0x3b6>
      break;
 80066e4:	bf00      	nop
  }
  return USBH_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af04      	add	r7, sp, #16
 80066f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80066f8:	2301      	movs	r3, #1
 80066fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80066fc:	2301      	movs	r3, #1
 80066fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	785b      	ldrb	r3, [r3, #1]
 8006704:	2b07      	cmp	r3, #7
 8006706:	f200 81c1 	bhi.w	8006a8c <USBH_HandleEnum+0x39c>
 800670a:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <USBH_HandleEnum+0x20>)
 800670c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006710:	08006731 	.word	0x08006731
 8006714:	080067ef 	.word	0x080067ef
 8006718:	08006859 	.word	0x08006859
 800671c:	080068e7 	.word	0x080068e7
 8006720:	08006951 	.word	0x08006951
 8006724:	080069c1 	.word	0x080069c1
 8006728:	08006a07 	.word	0x08006a07
 800672c:	08006a4d 	.word	0x08006a4d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006730:	2108      	movs	r1, #8
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa50 	bl	8006bd8 <USBH_Get_DevDesc>
 8006738:	4603      	mov	r3, r0
 800673a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800673c:	7bbb      	ldrb	r3, [r7, #14]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d130      	bne.n	80067a4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	7919      	ldrb	r1, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006766:	b292      	uxth	r2, r2
 8006768:	9202      	str	r2, [sp, #8]
 800676a:	2200      	movs	r2, #0
 800676c:	9201      	str	r2, [sp, #4]
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	4603      	mov	r3, r0
 8006772:	2280      	movs	r2, #128	; 0x80
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 ff79 	bl	800766c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	7959      	ldrb	r1, [r3, #5]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800678e:	b292      	uxth	r2, r2
 8006790:	9202      	str	r2, [sp, #8]
 8006792:	2200      	movs	r2, #0
 8006794:	9201      	str	r2, [sp, #4]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	4603      	mov	r3, r0
 800679a:	2200      	movs	r2, #0
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 ff65 	bl	800766c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80067a2:	e175      	b.n	8006a90 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067a4:	7bbb      	ldrb	r3, [r7, #14]
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	f040 8172 	bne.w	8006a90 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80067b2:	3301      	adds	r3, #1
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	d903      	bls.n	80067ce <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	220d      	movs	r2, #13
 80067ca:	701a      	strb	r2, [r3, #0]
      break;
 80067cc:	e160      	b.n	8006a90 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	795b      	ldrb	r3, [r3, #5]
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 ff99 	bl	800770c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	791b      	ldrb	r3, [r3, #4]
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 ff93 	bl	800770c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	701a      	strb	r2, [r3, #0]
      break;
 80067ec:	e150      	b.n	8006a90 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80067ee:	2112      	movs	r1, #18
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f9f1 	bl	8006bd8 <USBH_Get_DevDesc>
 80067f6:	4603      	mov	r3, r0
 80067f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80067fa:	7bbb      	ldrb	r3, [r7, #14]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d103      	bne.n	8006808 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006806:	e145      	b.n	8006a94 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006808:	7bbb      	ldrb	r3, [r7, #14]
 800680a:	2b03      	cmp	r3, #3
 800680c:	f040 8142 	bne.w	8006a94 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006816:	3301      	adds	r3, #1
 8006818:	b2da      	uxtb	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006826:	2b03      	cmp	r3, #3
 8006828:	d903      	bls.n	8006832 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	220d      	movs	r2, #13
 800682e:	701a      	strb	r2, [r3, #0]
      break;
 8006830:	e130      	b.n	8006a94 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	795b      	ldrb	r3, [r3, #5]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 ff67 	bl	800770c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	791b      	ldrb	r3, [r3, #4]
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 ff61 	bl	800770c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
      break;
 8006856:	e11d      	b.n	8006a94 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006858:	2101      	movs	r1, #1
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fa68 	bl	8006d30 <USBH_SetAddress>
 8006860:	4603      	mov	r3, r0
 8006862:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006864:	7bbb      	ldrb	r3, [r7, #14]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d132      	bne.n	80068d0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800686a:	2002      	movs	r0, #2
 800686c:	f001 fa45 	bl	8007cfa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2203      	movs	r2, #3
 800687c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	7919      	ldrb	r1, [r3, #4]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006892:	b292      	uxth	r2, r2
 8006894:	9202      	str	r2, [sp, #8]
 8006896:	2200      	movs	r2, #0
 8006898:	9201      	str	r2, [sp, #4]
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	4603      	mov	r3, r0
 800689e:	2280      	movs	r2, #128	; 0x80
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fee3 	bl	800766c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	7959      	ldrb	r1, [r3, #5]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80068ba:	b292      	uxth	r2, r2
 80068bc:	9202      	str	r2, [sp, #8]
 80068be:	2200      	movs	r2, #0
 80068c0:	9201      	str	r2, [sp, #4]
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	4603      	mov	r3, r0
 80068c6:	2200      	movs	r2, #0
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fecf 	bl	800766c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80068ce:	e0e3      	b.n	8006a98 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068d0:	7bbb      	ldrb	r3, [r7, #14]
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	f040 80e0 	bne.w	8006a98 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	220d      	movs	r2, #13
 80068dc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	705a      	strb	r2, [r3, #1]
      break;
 80068e4:	e0d8      	b.n	8006a98 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80068e6:	2109      	movs	r1, #9
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f99d 	bl	8006c28 <USBH_Get_CfgDesc>
 80068ee:	4603      	mov	r3, r0
 80068f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80068f2:	7bbb      	ldrb	r3, [r7, #14]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d103      	bne.n	8006900 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2204      	movs	r2, #4
 80068fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80068fe:	e0cd      	b.n	8006a9c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006900:	7bbb      	ldrb	r3, [r7, #14]
 8006902:	2b03      	cmp	r3, #3
 8006904:	f040 80ca 	bne.w	8006a9c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800690e:	3301      	adds	r3, #1
 8006910:	b2da      	uxtb	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800691e:	2b03      	cmp	r3, #3
 8006920:	d903      	bls.n	800692a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	220d      	movs	r2, #13
 8006926:	701a      	strb	r2, [r3, #0]
      break;
 8006928:	e0b8      	b.n	8006a9c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	795b      	ldrb	r3, [r3, #5]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 feeb 	bl	800770c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	791b      	ldrb	r3, [r3, #4]
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fee5 	bl	800770c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	701a      	strb	r2, [r3, #0]
      break;
 800694e:	e0a5      	b.n	8006a9c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f965 	bl	8006c28 <USBH_Get_CfgDesc>
 800695e:	4603      	mov	r3, r0
 8006960:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006962:	7bbb      	ldrb	r3, [r7, #14]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d103      	bne.n	8006970 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2205      	movs	r2, #5
 800696c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800696e:	e097      	b.n	8006aa0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006970:	7bbb      	ldrb	r3, [r7, #14]
 8006972:	2b03      	cmp	r3, #3
 8006974:	f040 8094 	bne.w	8006aa0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800697e:	3301      	adds	r3, #1
 8006980:	b2da      	uxtb	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800698e:	2b03      	cmp	r3, #3
 8006990:	d903      	bls.n	800699a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	220d      	movs	r2, #13
 8006996:	701a      	strb	r2, [r3, #0]
      break;
 8006998:	e082      	b.n	8006aa0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	795b      	ldrb	r3, [r3, #5]
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 feb3 	bl	800770c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	791b      	ldrb	r3, [r3, #4]
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fead 	bl	800770c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	701a      	strb	r2, [r3, #0]
      break;
 80069be:	e06f      	b.n	8006aa0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d019      	beq.n	80069fe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80069d6:	23ff      	movs	r3, #255	; 0xff
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f949 	bl	8006c70 <USBH_Get_StringDesc>
 80069de:	4603      	mov	r3, r0
 80069e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80069e2:	7bbb      	ldrb	r3, [r7, #14]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d103      	bne.n	80069f0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2206      	movs	r2, #6
 80069ec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80069ee:	e059      	b.n	8006aa4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80069f0:	7bbb      	ldrb	r3, [r7, #14]
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d156      	bne.n	8006aa4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2206      	movs	r2, #6
 80069fa:	705a      	strb	r2, [r3, #1]
      break;
 80069fc:	e052      	b.n	8006aa4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2206      	movs	r2, #6
 8006a02:	705a      	strb	r2, [r3, #1]
      break;
 8006a04:	e04e      	b.n	8006aa4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d019      	beq.n	8006a44 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006a1c:	23ff      	movs	r3, #255	; 0xff
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f926 	bl	8006c70 <USBH_Get_StringDesc>
 8006a24:	4603      	mov	r3, r0
 8006a26:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006a28:	7bbb      	ldrb	r3, [r7, #14]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d103      	bne.n	8006a36 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2207      	movs	r2, #7
 8006a32:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006a34:	e038      	b.n	8006aa8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a36:	7bbb      	ldrb	r3, [r7, #14]
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d135      	bne.n	8006aa8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2207      	movs	r2, #7
 8006a40:	705a      	strb	r2, [r3, #1]
      break;
 8006a42:	e031      	b.n	8006aa8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2207      	movs	r2, #7
 8006a48:	705a      	strb	r2, [r3, #1]
      break;
 8006a4a:	e02d      	b.n	8006aa8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d017      	beq.n	8006a86 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006a62:	23ff      	movs	r3, #255	; 0xff
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f903 	bl	8006c70 <USBH_Get_StringDesc>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006a6e:	7bbb      	ldrb	r3, [r7, #14]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d102      	bne.n	8006a7a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006a78:	e018      	b.n	8006aac <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a7a:	7bbb      	ldrb	r3, [r7, #14]
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d115      	bne.n	8006aac <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	73fb      	strb	r3, [r7, #15]
      break;
 8006a84:	e012      	b.n	8006aac <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	73fb      	strb	r3, [r7, #15]
      break;
 8006a8a:	e00f      	b.n	8006aac <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006a8c:	bf00      	nop
 8006a8e:	e00e      	b.n	8006aae <USBH_HandleEnum+0x3be>
      break;
 8006a90:	bf00      	nop
 8006a92:	e00c      	b.n	8006aae <USBH_HandleEnum+0x3be>
      break;
 8006a94:	bf00      	nop
 8006a96:	e00a      	b.n	8006aae <USBH_HandleEnum+0x3be>
      break;
 8006a98:	bf00      	nop
 8006a9a:	e008      	b.n	8006aae <USBH_HandleEnum+0x3be>
      break;
 8006a9c:	bf00      	nop
 8006a9e:	e006      	b.n	8006aae <USBH_HandleEnum+0x3be>
      break;
 8006aa0:	bf00      	nop
 8006aa2:	e004      	b.n	8006aae <USBH_HandleEnum+0x3be>
      break;
 8006aa4:	bf00      	nop
 8006aa6:	e002      	b.n	8006aae <USBH_HandleEnum+0x3be>
      break;
 8006aa8:	bf00      	nop
 8006aaa:	e000      	b.n	8006aae <USBH_HandleEnum+0x3be>
      break;
 8006aac:	bf00      	nop
  }
  return Status;
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f804 	bl	8006afa <USBH_HandleSof>
}
 8006af2:	bf00      	nop
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b082      	sub	sp, #8
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b0b      	cmp	r3, #11
 8006b0a:	d10a      	bne.n	8006b22 <USBH_HandleSof+0x28>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	4798      	blx	r3
  }
}
 8006b22:	bf00      	nop
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006b3a:	bf00      	nop
}
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006b56:	bf00      	nop
}
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 ff58 	bl	8007a66 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	791b      	ldrb	r3, [r3, #4]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fda5 	bl	800770c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	795b      	ldrb	r3, [r3, #5]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fd9f 	bl	800770c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f864 	bl	8006cc6 <USBH_GetDescriptor>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73fb      	strb	r3, [r7, #15]
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10a      	bne.n	8006c1e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c14:	78fa      	ldrb	r2, [r7, #3]
 8006c16:	b292      	uxth	r2, r2
 8006c18:	4619      	mov	r1, r3
 8006c1a:	f000 f918 	bl	8006e4e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af02      	add	r7, sp, #8
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	331c      	adds	r3, #28
 8006c38:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006c3a:	887b      	ldrh	r3, [r7, #2]
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c44:	2100      	movs	r1, #0
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f83d 	bl	8006cc6 <USBH_GetDescriptor>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	72fb      	strb	r3, [r7, #11]
 8006c50:	7afb      	ldrb	r3, [r7, #11]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d107      	bne.n	8006c66 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006c5c:	887a      	ldrh	r2, [r7, #2]
 8006c5e:	68f9      	ldr	r1, [r7, #12]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 f964 	bl	8006f2e <USBH_ParseCfgDesc>
  }

  return status;
 8006c66:	7afb      	ldrb	r3, [r7, #11]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b088      	sub	sp, #32
 8006c74:	af02      	add	r7, sp, #8
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	607a      	str	r2, [r7, #4]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	72fb      	strb	r3, [r7, #11]
 8006c80:	4613      	mov	r3, r2
 8006c82:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006c84:	7afb      	ldrb	r3, [r7, #11]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006c8c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006c94:	893b      	ldrh	r3, [r7, #8]
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f812 	bl	8006cc6 <USBH_GetDescriptor>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	75fb      	strb	r3, [r7, #23]
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d107      	bne.n	8006cbc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006cb2:	893a      	ldrh	r2, [r7, #8]
 8006cb4:	6879      	ldr	r1, [r7, #4]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fa37 	bl	800712a <USBH_ParseStringDesc>
  }

  return status;
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	607b      	str	r3, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	72fb      	strb	r3, [r7, #11]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	789b      	ldrb	r3, [r3, #2]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d11c      	bne.n	8006d1a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006ce0:	7afb      	ldrb	r3, [r7, #11]
 8006ce2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2206      	movs	r2, #6
 8006cf0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	893a      	ldrh	r2, [r7, #8]
 8006cf6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006cf8:	893b      	ldrh	r3, [r7, #8]
 8006cfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d02:	d104      	bne.n	8006d0e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f240 4209 	movw	r2, #1033	; 0x409
 8006d0a:	829a      	strh	r2, [r3, #20]
 8006d0c:	e002      	b.n	8006d14 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8b3a      	ldrh	r2, [r7, #24]
 8006d18:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006d1a:	8b3b      	ldrh	r3, [r7, #24]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 fa50 	bl	80071c6 <USBH_CtlReq>
 8006d26:	4603      	mov	r3, r0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	789b      	ldrb	r3, [r3, #2]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d10f      	bne.n	8006d64 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2205      	movs	r2, #5
 8006d4e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006d64:	2200      	movs	r2, #0
 8006d66:	2100      	movs	r1, #0
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fa2c 	bl	80071c6 <USBH_CtlReq>
 8006d6e:	4603      	mov	r3, r0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	789b      	ldrb	r3, [r3, #2]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d10e      	bne.n	8006daa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2209      	movs	r2, #9
 8006d96:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	887a      	ldrh	r2, [r7, #2]
 8006d9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006daa:	2200      	movs	r2, #0
 8006dac:	2100      	movs	r1, #0
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fa09 	bl	80071c6 <USBH_CtlReq>
 8006db4:	4603      	mov	r3, r0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	789b      	ldrb	r3, [r3, #2]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d10f      	bne.n	8006df2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2203      	movs	r2, #3
 8006ddc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006dde:	78fb      	ldrb	r3, [r7, #3]
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006df2:	2200      	movs	r2, #0
 8006df4:	2100      	movs	r1, #0
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f9e5 	bl	80071c6 <USBH_CtlReq>
 8006dfc:	4603      	mov	r3, r0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b082      	sub	sp, #8
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	789b      	ldrb	r3, [r3, #2]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d10f      	bne.n	8006e3a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006e2c:	78fb      	ldrb	r3, [r7, #3]
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f9c1 	bl	80071c6 <USBH_CtlReq>
 8006e44:	4603      	mov	r3, r0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b085      	sub	sp, #20
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	60f8      	str	r0, [r7, #12]
 8006e56:	60b9      	str	r1, [r7, #8]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	781a      	ldrb	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	785a      	ldrb	r2, [r3, #1]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	3302      	adds	r3, #2
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	3303      	adds	r3, #3
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	021b      	lsls	r3, r3, #8
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	4313      	orrs	r3, r2
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	791a      	ldrb	r2, [r3, #4]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	795a      	ldrb	r2, [r3, #5]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	799a      	ldrb	r2, [r3, #6]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	79da      	ldrb	r2, [r3, #7]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006ea8:	88fb      	ldrh	r3, [r7, #6]
 8006eaa:	2b08      	cmp	r3, #8
 8006eac:	d939      	bls.n	8006f22 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	3309      	adds	r3, #9
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	330a      	adds	r3, #10
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	330b      	adds	r3, #11
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	021b      	lsls	r3, r3, #8
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	330c      	adds	r3, #12
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	330d      	adds	r3, #13
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	021b      	lsls	r3, r3, #8
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	4313      	orrs	r3, r2
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	7b9a      	ldrb	r2, [r3, #14]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	7bda      	ldrb	r2, [r3, #15]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	7c1a      	ldrb	r2, [r3, #16]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	7c5a      	ldrb	r2, [r3, #17]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	745a      	strb	r2, [r3, #17]
  }
}
 8006f22:	bf00      	nop
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b08a      	sub	sp, #40	; 0x28
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	781a      	ldrb	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	785a      	ldrb	r2, [r3, #1]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	3302      	adds	r3, #2
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	3303      	adds	r3, #3
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	021b      	lsls	r3, r3, #8
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	4313      	orrs	r3, r2
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	791a      	ldrb	r2, [r3, #4]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	795a      	ldrb	r2, [r3, #5]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	799a      	ldrb	r2, [r3, #6]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	79da      	ldrb	r2, [r3, #7]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	7a1a      	ldrb	r2, [r3, #8]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006fa4:	88fb      	ldrh	r3, [r7, #6]
 8006fa6:	2b09      	cmp	r3, #9
 8006fa8:	d95f      	bls.n	800706a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006faa:	2309      	movs	r3, #9
 8006fac:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006fb2:	e051      	b.n	8007058 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006fb4:	f107 0316 	add.w	r3, r7, #22
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fbc:	f000 f8e8 	bl	8007190 <USBH_GetNextDesc>
 8006fc0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	785b      	ldrb	r3, [r3, #1]
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d146      	bne.n	8007058 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006fca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fce:	221a      	movs	r2, #26
 8006fd0:	fb02 f303 	mul.w	r3, r2, r3
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	4413      	add	r3, r2
 8006fda:	3302      	adds	r3, #2
 8006fdc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006fde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fe0:	69f8      	ldr	r0, [r7, #28]
 8006fe2:	f000 f846 	bl	8007072 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006ff0:	e022      	b.n	8007038 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006ff2:	f107 0316 	add.w	r3, r7, #22
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ffa:	f000 f8c9 	bl	8007190 <USBH_GetNextDesc>
 8006ffe:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	785b      	ldrb	r3, [r3, #1]
 8007004:	2b05      	cmp	r3, #5
 8007006:	d117      	bne.n	8007038 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800700c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007010:	3201      	adds	r2, #1
 8007012:	00d2      	lsls	r2, r2, #3
 8007014:	211a      	movs	r1, #26
 8007016:	fb01 f303 	mul.w	r3, r1, r3
 800701a:	4413      	add	r3, r2
 800701c:	3308      	adds	r3, #8
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	4413      	add	r3, r2
 8007022:	3304      	adds	r3, #4
 8007024:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007026:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007028:	69b8      	ldr	r0, [r7, #24]
 800702a:	f000 f851 	bl	80070d0 <USBH_ParseEPDesc>
            ep_ix++;
 800702e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007032:	3301      	adds	r3, #1
 8007034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	791b      	ldrb	r3, [r3, #4]
 800703c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007040:	429a      	cmp	r2, r3
 8007042:	d204      	bcs.n	800704e <USBH_ParseCfgDesc+0x120>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	885a      	ldrh	r2, [r3, #2]
 8007048:	8afb      	ldrh	r3, [r7, #22]
 800704a:	429a      	cmp	r2, r3
 800704c:	d8d1      	bhi.n	8006ff2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800704e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007052:	3301      	adds	r3, #1
 8007054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007058:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800705c:	2b01      	cmp	r3, #1
 800705e:	d804      	bhi.n	800706a <USBH_ParseCfgDesc+0x13c>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	885a      	ldrh	r2, [r3, #2]
 8007064:	8afb      	ldrh	r3, [r7, #22]
 8007066:	429a      	cmp	r2, r3
 8007068:	d8a4      	bhi.n	8006fb4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800706a:	bf00      	nop
 800706c:	3728      	adds	r7, #40	; 0x28
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007072:	b480      	push	{r7}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781a      	ldrb	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	785a      	ldrb	r2, [r3, #1]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	789a      	ldrb	r2, [r3, #2]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	78da      	ldrb	r2, [r3, #3]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	791a      	ldrb	r2, [r3, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	795a      	ldrb	r2, [r3, #5]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	799a      	ldrb	r2, [r3, #6]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	79da      	ldrb	r2, [r3, #7]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	7a1a      	ldrb	r2, [r3, #8]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	721a      	strb	r2, [r3, #8]
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781a      	ldrb	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	785a      	ldrb	r2, [r3, #1]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	789a      	ldrb	r2, [r3, #2]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	78da      	ldrb	r2, [r3, #3]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	3304      	adds	r3, #4
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	b29a      	uxth	r2, r3
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	3305      	adds	r3, #5
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	b29b      	uxth	r3, r3
 800710a:	021b      	lsls	r3, r3, #8
 800710c:	b29b      	uxth	r3, r3
 800710e:	4313      	orrs	r3, r2
 8007110:	b29a      	uxth	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	799a      	ldrb	r2, [r3, #6]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	719a      	strb	r2, [r3, #6]
}
 800711e:	bf00      	nop
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800712a:	b480      	push	{r7}
 800712c:	b087      	sub	sp, #28
 800712e:	af00      	add	r7, sp, #0
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	4613      	mov	r3, r2
 8007136:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	2b03      	cmp	r3, #3
 8007140:	d120      	bne.n	8007184 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	1e9a      	subs	r2, r3, #2
 8007148:	88fb      	ldrh	r3, [r7, #6]
 800714a:	4293      	cmp	r3, r2
 800714c:	bf28      	it	cs
 800714e:	4613      	movcs	r3, r2
 8007150:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	3302      	adds	r3, #2
 8007156:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007158:	2300      	movs	r3, #0
 800715a:	82fb      	strh	r3, [r7, #22]
 800715c:	e00b      	b.n	8007176 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800715e:	8afb      	ldrh	r3, [r7, #22]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	781a      	ldrb	r2, [r3, #0]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	701a      	strb	r2, [r3, #0]
      pdest++;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	3301      	adds	r3, #1
 800716e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007170:	8afb      	ldrh	r3, [r7, #22]
 8007172:	3302      	adds	r3, #2
 8007174:	82fb      	strh	r3, [r7, #22]
 8007176:	8afa      	ldrh	r2, [r7, #22]
 8007178:	8abb      	ldrh	r3, [r7, #20]
 800717a:	429a      	cmp	r2, r3
 800717c:	d3ef      	bcc.n	800715e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2200      	movs	r2, #0
 8007182:	701a      	strb	r2, [r3, #0]
  }
}
 8007184:	bf00      	nop
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	881a      	ldrh	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	4413      	add	r3, r2
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4413      	add	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80071b8:	68fb      	ldr	r3, [r7, #12]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b086      	sub	sp, #24
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	4613      	mov	r3, r2
 80071d2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80071d4:	2301      	movs	r3, #1
 80071d6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	789b      	ldrb	r3, [r3, #2]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d002      	beq.n	80071e6 <USBH_CtlReq+0x20>
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d00f      	beq.n	8007204 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80071e4:	e027      	b.n	8007236 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	88fa      	ldrh	r2, [r7, #6]
 80071f0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2201      	movs	r2, #1
 80071f6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2202      	movs	r2, #2
 80071fc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80071fe:	2301      	movs	r3, #1
 8007200:	75fb      	strb	r3, [r7, #23]
      break;
 8007202:	e018      	b.n	8007236 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 f81b 	bl	8007240 <USBH_HandleControl>
 800720a:	4603      	mov	r3, r0
 800720c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800720e:	7dfb      	ldrb	r3, [r7, #23]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <USBH_CtlReq+0x54>
 8007214:	7dfb      	ldrb	r3, [r7, #23]
 8007216:	2b03      	cmp	r3, #3
 8007218:	d106      	bne.n	8007228 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2201      	movs	r2, #1
 800721e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	761a      	strb	r2, [r3, #24]
      break;
 8007226:	e005      	b.n	8007234 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	2b02      	cmp	r3, #2
 800722c:	d102      	bne.n	8007234 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2201      	movs	r2, #1
 8007232:	709a      	strb	r2, [r3, #2]
      break;
 8007234:	bf00      	nop
  }
  return status;
 8007236:	7dfb      	ldrb	r3, [r7, #23]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af02      	add	r7, sp, #8
 8007246:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007248:	2301      	movs	r3, #1
 800724a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800724c:	2300      	movs	r3, #0
 800724e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	7e1b      	ldrb	r3, [r3, #24]
 8007254:	3b01      	subs	r3, #1
 8007256:	2b0a      	cmp	r3, #10
 8007258:	f200 8158 	bhi.w	800750c <USBH_HandleControl+0x2cc>
 800725c:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <USBH_HandleControl+0x24>)
 800725e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007262:	bf00      	nop
 8007264:	08007291 	.word	0x08007291
 8007268:	080072ab 	.word	0x080072ab
 800726c:	08007315 	.word	0x08007315
 8007270:	0800733b 	.word	0x0800733b
 8007274:	08007373 	.word	0x08007373
 8007278:	0800739f 	.word	0x0800739f
 800727c:	080073f1 	.word	0x080073f1
 8007280:	08007413 	.word	0x08007413
 8007284:	0800744f 	.word	0x0800744f
 8007288:	08007477 	.word	0x08007477
 800728c:	080074b5 	.word	0x080074b5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f103 0110 	add.w	r1, r3, #16
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	795b      	ldrb	r3, [r3, #5]
 800729a:	461a      	mov	r2, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f945 	bl	800752c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2202      	movs	r2, #2
 80072a6:	761a      	strb	r2, [r3, #24]
      break;
 80072a8:	e13b      	b.n	8007522 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	795b      	ldrb	r3, [r3, #5]
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fcc5 	bl	8007c40 <USBH_LL_GetURBState>
 80072b6:	4603      	mov	r3, r0
 80072b8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80072ba:	7bbb      	ldrb	r3, [r7, #14]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d11e      	bne.n	80072fe <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	7c1b      	ldrb	r3, [r3, #16]
 80072c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072c8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	8adb      	ldrh	r3, [r3, #22]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80072d2:	7b7b      	ldrb	r3, [r7, #13]
 80072d4:	2b80      	cmp	r3, #128	; 0x80
 80072d6:	d103      	bne.n	80072e0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2203      	movs	r2, #3
 80072dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80072de:	e117      	b.n	8007510 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2205      	movs	r2, #5
 80072e4:	761a      	strb	r2, [r3, #24]
      break;
 80072e6:	e113      	b.n	8007510 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80072e8:	7b7b      	ldrb	r3, [r7, #13]
 80072ea:	2b80      	cmp	r3, #128	; 0x80
 80072ec:	d103      	bne.n	80072f6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2209      	movs	r2, #9
 80072f2:	761a      	strb	r2, [r3, #24]
      break;
 80072f4:	e10c      	b.n	8007510 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2207      	movs	r2, #7
 80072fa:	761a      	strb	r2, [r3, #24]
      break;
 80072fc:	e108      	b.n	8007510 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
 8007300:	2b04      	cmp	r3, #4
 8007302:	d003      	beq.n	800730c <USBH_HandleControl+0xcc>
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	2b02      	cmp	r3, #2
 8007308:	f040 8102 	bne.w	8007510 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	220b      	movs	r2, #11
 8007310:	761a      	strb	r2, [r3, #24]
      break;
 8007312:	e0fd      	b.n	8007510 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800731a:	b29a      	uxth	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6899      	ldr	r1, [r3, #8]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	899a      	ldrh	r2, [r3, #12]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	791b      	ldrb	r3, [r3, #4]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f93c 	bl	80075aa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2204      	movs	r2, #4
 8007336:	761a      	strb	r2, [r3, #24]
      break;
 8007338:	e0f3      	b.n	8007522 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	791b      	ldrb	r3, [r3, #4]
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fc7d 	bl	8007c40 <USBH_LL_GetURBState>
 8007346:	4603      	mov	r3, r0
 8007348:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800734a:	7bbb      	ldrb	r3, [r7, #14]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d102      	bne.n	8007356 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2209      	movs	r2, #9
 8007354:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	2b05      	cmp	r3, #5
 800735a:	d102      	bne.n	8007362 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800735c:	2303      	movs	r3, #3
 800735e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007360:	e0d8      	b.n	8007514 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	2b04      	cmp	r3, #4
 8007366:	f040 80d5 	bne.w	8007514 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	220b      	movs	r2, #11
 800736e:	761a      	strb	r2, [r3, #24]
      break;
 8007370:	e0d0      	b.n	8007514 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6899      	ldr	r1, [r3, #8]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	899a      	ldrh	r2, [r3, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	7958      	ldrb	r0, [r3, #5]
 800737e:	2301      	movs	r3, #1
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	4603      	mov	r3, r0
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f8eb 	bl	8007560 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007390:	b29a      	uxth	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2206      	movs	r2, #6
 800739a:	761a      	strb	r2, [r3, #24]
      break;
 800739c:	e0c1      	b.n	8007522 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	795b      	ldrb	r3, [r3, #5]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fc4b 	bl	8007c40 <USBH_LL_GetURBState>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d103      	bne.n	80073bc <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2207      	movs	r2, #7
 80073b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80073ba:	e0ad      	b.n	8007518 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80073bc:	7bbb      	ldrb	r3, [r7, #14]
 80073be:	2b05      	cmp	r3, #5
 80073c0:	d105      	bne.n	80073ce <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	220c      	movs	r2, #12
 80073c6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80073c8:	2303      	movs	r3, #3
 80073ca:	73fb      	strb	r3, [r7, #15]
      break;
 80073cc:	e0a4      	b.n	8007518 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d103      	bne.n	80073dc <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2205      	movs	r2, #5
 80073d8:	761a      	strb	r2, [r3, #24]
      break;
 80073da:	e09d      	b.n	8007518 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	2b04      	cmp	r3, #4
 80073e0:	f040 809a 	bne.w	8007518 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	220b      	movs	r2, #11
 80073e8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80073ea:	2302      	movs	r3, #2
 80073ec:	73fb      	strb	r3, [r7, #15]
      break;
 80073ee:	e093      	b.n	8007518 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	791b      	ldrb	r3, [r3, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	2100      	movs	r1, #0
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f8d6 	bl	80075aa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007404:	b29a      	uxth	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2208      	movs	r2, #8
 800740e:	761a      	strb	r2, [r3, #24]

      break;
 8007410:	e087      	b.n	8007522 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	791b      	ldrb	r3, [r3, #4]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fc11 	bl	8007c40 <USBH_LL_GetURBState>
 800741e:	4603      	mov	r3, r0
 8007420:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d105      	bne.n	8007434 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	220d      	movs	r2, #13
 800742c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007432:	e073      	b.n	800751c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	2b04      	cmp	r3, #4
 8007438:	d103      	bne.n	8007442 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	220b      	movs	r2, #11
 800743e:	761a      	strb	r2, [r3, #24]
      break;
 8007440:	e06c      	b.n	800751c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	2b05      	cmp	r3, #5
 8007446:	d169      	bne.n	800751c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8007448:	2303      	movs	r3, #3
 800744a:	73fb      	strb	r3, [r7, #15]
      break;
 800744c:	e066      	b.n	800751c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	795a      	ldrb	r2, [r3, #5]
 8007452:	2301      	movs	r3, #1
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	4613      	mov	r3, r2
 8007458:	2200      	movs	r2, #0
 800745a:	2100      	movs	r1, #0
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f87f 	bl	8007560 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007468:	b29a      	uxth	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	220a      	movs	r2, #10
 8007472:	761a      	strb	r2, [r3, #24]
      break;
 8007474:	e055      	b.n	8007522 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	795b      	ldrb	r3, [r3, #5]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fbdf 	bl	8007c40 <USBH_LL_GetURBState>
 8007482:	4603      	mov	r3, r0
 8007484:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007486:	7bbb      	ldrb	r3, [r7, #14]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d105      	bne.n	8007498 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	220d      	movs	r2, #13
 8007494:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007496:	e043      	b.n	8007520 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d103      	bne.n	80074a6 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2209      	movs	r2, #9
 80074a2:	761a      	strb	r2, [r3, #24]
      break;
 80074a4:	e03c      	b.n	8007520 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d139      	bne.n	8007520 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	220b      	movs	r2, #11
 80074b0:	761a      	strb	r2, [r3, #24]
      break;
 80074b2:	e035      	b.n	8007520 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	7e5b      	ldrb	r3, [r3, #25]
 80074b8:	3301      	adds	r3, #1
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	765a      	strb	r2, [r3, #25]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	7e5b      	ldrb	r3, [r3, #25]
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d806      	bhi.n	80074d6 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80074d4:	e025      	b.n	8007522 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074dc:	2106      	movs	r1, #6
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	795b      	ldrb	r3, [r3, #5]
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f90c 	bl	800770c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	791b      	ldrb	r3, [r3, #4]
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f906 	bl	800770c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007506:	2302      	movs	r3, #2
 8007508:	73fb      	strb	r3, [r7, #15]
      break;
 800750a:	e00a      	b.n	8007522 <USBH_HandleControl+0x2e2>

    default:
      break;
 800750c:	bf00      	nop
 800750e:	e008      	b.n	8007522 <USBH_HandleControl+0x2e2>
      break;
 8007510:	bf00      	nop
 8007512:	e006      	b.n	8007522 <USBH_HandleControl+0x2e2>
      break;
 8007514:	bf00      	nop
 8007516:	e004      	b.n	8007522 <USBH_HandleControl+0x2e2>
      break;
 8007518:	bf00      	nop
 800751a:	e002      	b.n	8007522 <USBH_HandleControl+0x2e2>
      break;
 800751c:	bf00      	nop
 800751e:	e000      	b.n	8007522 <USBH_HandleControl+0x2e2>
      break;
 8007520:	bf00      	nop
  }

  return status;
 8007522:	7bfb      	ldrb	r3, [r7, #15]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af04      	add	r7, sp, #16
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	4613      	mov	r3, r2
 8007538:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800753a:	79f9      	ldrb	r1, [r7, #7]
 800753c:	2300      	movs	r3, #0
 800753e:	9303      	str	r3, [sp, #12]
 8007540:	2308      	movs	r3, #8
 8007542:	9302      	str	r3, [sp, #8]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	9301      	str	r3, [sp, #4]
 8007548:	2300      	movs	r3, #0
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	2300      	movs	r3, #0
 800754e:	2200      	movs	r2, #0
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 fb44 	bl	8007bde <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b088      	sub	sp, #32
 8007564:	af04      	add	r7, sp, #16
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	4611      	mov	r1, r2
 800756c:	461a      	mov	r2, r3
 800756e:	460b      	mov	r3, r1
 8007570:	80fb      	strh	r3, [r7, #6]
 8007572:	4613      	mov	r3, r2
 8007574:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007584:	7979      	ldrb	r1, [r7, #5]
 8007586:	7e3b      	ldrb	r3, [r7, #24]
 8007588:	9303      	str	r3, [sp, #12]
 800758a:	88fb      	ldrh	r3, [r7, #6]
 800758c:	9302      	str	r3, [sp, #8]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	2301      	movs	r3, #1
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	2300      	movs	r3, #0
 8007598:	2200      	movs	r2, #0
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 fb1f 	bl	8007bde <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b088      	sub	sp, #32
 80075ae:	af04      	add	r7, sp, #16
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	4611      	mov	r1, r2
 80075b6:	461a      	mov	r2, r3
 80075b8:	460b      	mov	r3, r1
 80075ba:	80fb      	strh	r3, [r7, #6]
 80075bc:	4613      	mov	r3, r2
 80075be:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80075c0:	7979      	ldrb	r1, [r7, #5]
 80075c2:	2300      	movs	r3, #0
 80075c4:	9303      	str	r3, [sp, #12]
 80075c6:	88fb      	ldrh	r3, [r7, #6]
 80075c8:	9302      	str	r3, [sp, #8]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	2301      	movs	r3, #1
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	2300      	movs	r3, #0
 80075d4:	2201      	movs	r2, #1
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 fb01 	bl	8007bde <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80075dc:	2300      	movs	r3, #0

}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b088      	sub	sp, #32
 80075ea:	af04      	add	r7, sp, #16
 80075ec:	60f8      	str	r0, [r7, #12]
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	4611      	mov	r1, r2
 80075f2:	461a      	mov	r2, r3
 80075f4:	460b      	mov	r3, r1
 80075f6:	80fb      	strh	r3, [r7, #6]
 80075f8:	4613      	mov	r3, r2
 80075fa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007606:	2300      	movs	r3, #0
 8007608:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800760a:	7979      	ldrb	r1, [r7, #5]
 800760c:	7e3b      	ldrb	r3, [r7, #24]
 800760e:	9303      	str	r3, [sp, #12]
 8007610:	88fb      	ldrh	r3, [r7, #6]
 8007612:	9302      	str	r3, [sp, #8]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	9301      	str	r3, [sp, #4]
 8007618:	2301      	movs	r3, #1
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	2302      	movs	r3, #2
 800761e:	2200      	movs	r2, #0
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fadc 	bl	8007bde <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af04      	add	r7, sp, #16
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4611      	mov	r1, r2
 800763c:	461a      	mov	r2, r3
 800763e:	460b      	mov	r3, r1
 8007640:	80fb      	strh	r3, [r7, #6]
 8007642:	4613      	mov	r3, r2
 8007644:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007646:	7979      	ldrb	r1, [r7, #5]
 8007648:	2300      	movs	r3, #0
 800764a:	9303      	str	r3, [sp, #12]
 800764c:	88fb      	ldrh	r3, [r7, #6]
 800764e:	9302      	str	r3, [sp, #8]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	9301      	str	r3, [sp, #4]
 8007654:	2301      	movs	r3, #1
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	2302      	movs	r3, #2
 800765a:	2201      	movs	r2, #1
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 fabe 	bl	8007bde <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af04      	add	r7, sp, #16
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	4608      	mov	r0, r1
 8007676:	4611      	mov	r1, r2
 8007678:	461a      	mov	r2, r3
 800767a:	4603      	mov	r3, r0
 800767c:	70fb      	strb	r3, [r7, #3]
 800767e:	460b      	mov	r3, r1
 8007680:	70bb      	strb	r3, [r7, #2]
 8007682:	4613      	mov	r3, r2
 8007684:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007686:	7878      	ldrb	r0, [r7, #1]
 8007688:	78ba      	ldrb	r2, [r7, #2]
 800768a:	78f9      	ldrb	r1, [r7, #3]
 800768c:	8b3b      	ldrh	r3, [r7, #24]
 800768e:	9302      	str	r3, [sp, #8]
 8007690:	7d3b      	ldrb	r3, [r7, #20]
 8007692:	9301      	str	r3, [sp, #4]
 8007694:	7c3b      	ldrb	r3, [r7, #16]
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	4603      	mov	r3, r0
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fa51 	bl	8007b42 <USBH_LL_OpenPipe>

  return USBH_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b082      	sub	sp, #8
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	460b      	mov	r3, r1
 80076b4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80076b6:	78fb      	ldrb	r3, [r7, #3]
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fa70 	bl	8007ba0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	460b      	mov	r3, r1
 80076d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f836 	bl	8007748 <USBH_GetFreePipe>
 80076dc:	4603      	mov	r3, r0
 80076de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80076e0:	89fb      	ldrh	r3, [r7, #14]
 80076e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d00a      	beq.n	8007700 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80076ea:	78fa      	ldrb	r2, [r7, #3]
 80076ec:	89fb      	ldrh	r3, [r7, #14]
 80076ee:	f003 030f 	and.w	r3, r3, #15
 80076f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	33e0      	adds	r3, #224	; 0xe0
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	440b      	add	r3, r1
 80076fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007700:	89fb      	ldrh	r3, [r7, #14]
 8007702:	b2db      	uxtb	r3, r3
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007718:	78fb      	ldrb	r3, [r7, #3]
 800771a:	2b0a      	cmp	r3, #10
 800771c:	d80d      	bhi.n	800773a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	33e0      	adds	r3, #224	; 0xe0
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007730:	6879      	ldr	r1, [r7, #4]
 8007732:	33e0      	adds	r3, #224	; 0xe0
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	440b      	add	r3, r1
 8007738:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007750:	2300      	movs	r3, #0
 8007752:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007754:	2300      	movs	r3, #0
 8007756:	73fb      	strb	r3, [r7, #15]
 8007758:	e00f      	b.n	800777a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800775a:	7bfb      	ldrb	r3, [r7, #15]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	33e0      	adds	r3, #224	; 0xe0
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d102      	bne.n	8007774 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	b29b      	uxth	r3, r3
 8007772:	e007      	b.n	8007784 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007774:	7bfb      	ldrb	r3, [r7, #15]
 8007776:	3301      	adds	r3, #1
 8007778:	73fb      	strb	r3, [r7, #15]
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	2b0a      	cmp	r3, #10
 800777e:	d9ec      	bls.n	800775a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007780:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007794:	2201      	movs	r2, #1
 8007796:	490e      	ldr	r1, [pc, #56]	; (80077d0 <MX_USB_HOST_Init+0x40>)
 8007798:	480e      	ldr	r0, [pc, #56]	; (80077d4 <MX_USB_HOST_Init+0x44>)
 800779a:	f7fe fc9f 	bl	80060dc <USBH_Init>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80077a4:	f7f9 f9f2 	bl	8000b8c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80077a8:	490b      	ldr	r1, [pc, #44]	; (80077d8 <MX_USB_HOST_Init+0x48>)
 80077aa:	480a      	ldr	r0, [pc, #40]	; (80077d4 <MX_USB_HOST_Init+0x44>)
 80077ac:	f7fe fd24 	bl	80061f8 <USBH_RegisterClass>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80077b6:	f7f9 f9e9 	bl	8000b8c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80077ba:	4806      	ldr	r0, [pc, #24]	; (80077d4 <MX_USB_HOST_Init+0x44>)
 80077bc:	f7fe fda8 	bl	8006310 <USBH_Start>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80077c6:	f7f9 f9e1 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80077ca:	bf00      	nop
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	080077f1 	.word	0x080077f1
 80077d4:	20000208 	.word	0x20000208
 80077d8:	2000001c 	.word	0x2000001c

080077dc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80077e0:	4802      	ldr	r0, [pc, #8]	; (80077ec <MX_USB_HOST_Process+0x10>)
 80077e2:	f7fe fda5 	bl	8006330 <USBH_Process>
}
 80077e6:	bf00      	nop
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	20000208 	.word	0x20000208

080077f0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80077fc:	78fb      	ldrb	r3, [r7, #3]
 80077fe:	3b01      	subs	r3, #1
 8007800:	2b04      	cmp	r3, #4
 8007802:	d819      	bhi.n	8007838 <USBH_UserProcess+0x48>
 8007804:	a201      	add	r2, pc, #4	; (adr r2, 800780c <USBH_UserProcess+0x1c>)
 8007806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780a:	bf00      	nop
 800780c:	08007839 	.word	0x08007839
 8007810:	08007829 	.word	0x08007829
 8007814:	08007839 	.word	0x08007839
 8007818:	08007831 	.word	0x08007831
 800781c:	08007821 	.word	0x08007821
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007820:	4b09      	ldr	r3, [pc, #36]	; (8007848 <USBH_UserProcess+0x58>)
 8007822:	2203      	movs	r2, #3
 8007824:	701a      	strb	r2, [r3, #0]
  break;
 8007826:	e008      	b.n	800783a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007828:	4b07      	ldr	r3, [pc, #28]	; (8007848 <USBH_UserProcess+0x58>)
 800782a:	2202      	movs	r2, #2
 800782c:	701a      	strb	r2, [r3, #0]
  break;
 800782e:	e004      	b.n	800783a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007830:	4b05      	ldr	r3, [pc, #20]	; (8007848 <USBH_UserProcess+0x58>)
 8007832:	2201      	movs	r2, #1
 8007834:	701a      	strb	r2, [r3, #0]
  break;
 8007836:	e000      	b.n	800783a <USBH_UserProcess+0x4a>

  default:
  break;
 8007838:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	200000c8 	.word	0x200000c8

0800784c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b08a      	sub	sp, #40	; 0x28
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007854:	f107 0314 	add.w	r3, r7, #20
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	605a      	str	r2, [r3, #4]
 800785e:	609a      	str	r2, [r3, #8]
 8007860:	60da      	str	r2, [r3, #12]
 8007862:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800786c:	d147      	bne.n	80078fe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800786e:	2300      	movs	r3, #0
 8007870:	613b      	str	r3, [r7, #16]
 8007872:	4b25      	ldr	r3, [pc, #148]	; (8007908 <HAL_HCD_MspInit+0xbc>)
 8007874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007876:	4a24      	ldr	r2, [pc, #144]	; (8007908 <HAL_HCD_MspInit+0xbc>)
 8007878:	f043 0301 	orr.w	r3, r3, #1
 800787c:	6313      	str	r3, [r2, #48]	; 0x30
 800787e:	4b22      	ldr	r3, [pc, #136]	; (8007908 <HAL_HCD_MspInit+0xbc>)
 8007880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	613b      	str	r3, [r7, #16]
 8007888:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800788a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800788e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007890:	2300      	movs	r3, #0
 8007892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007894:	2300      	movs	r3, #0
 8007896:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007898:	f107 0314 	add.w	r3, r7, #20
 800789c:	4619      	mov	r1, r3
 800789e:	481b      	ldr	r0, [pc, #108]	; (800790c <HAL_HCD_MspInit+0xc0>)
 80078a0:	f7f9 fd2c 	bl	80012fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80078a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80078a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078aa:	2302      	movs	r3, #2
 80078ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078b2:	2300      	movs	r3, #0
 80078b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80078b6:	230a      	movs	r3, #10
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078ba:	f107 0314 	add.w	r3, r7, #20
 80078be:	4619      	mov	r1, r3
 80078c0:	4812      	ldr	r0, [pc, #72]	; (800790c <HAL_HCD_MspInit+0xc0>)
 80078c2:	f7f9 fd1b 	bl	80012fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80078c6:	4b10      	ldr	r3, [pc, #64]	; (8007908 <HAL_HCD_MspInit+0xbc>)
 80078c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ca:	4a0f      	ldr	r2, [pc, #60]	; (8007908 <HAL_HCD_MspInit+0xbc>)
 80078cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d0:	6353      	str	r3, [r2, #52]	; 0x34
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
 80078d6:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <HAL_HCD_MspInit+0xbc>)
 80078d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078da:	4a0b      	ldr	r2, [pc, #44]	; (8007908 <HAL_HCD_MspInit+0xbc>)
 80078dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078e0:	6453      	str	r3, [r2, #68]	; 0x44
 80078e2:	4b09      	ldr	r3, [pc, #36]	; (8007908 <HAL_HCD_MspInit+0xbc>)
 80078e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80078ee:	2200      	movs	r2, #0
 80078f0:	2100      	movs	r1, #0
 80078f2:	2043      	movs	r0, #67	; 0x43
 80078f4:	f7f9 fccb 	bl	800128e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80078f8:	2043      	movs	r0, #67	; 0x43
 80078fa:	f7f9 fce4 	bl	80012c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80078fe:	bf00      	nop
 8007900:	3728      	adds	r7, #40	; 0x28
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	40023800 	.word	0x40023800
 800790c:	40020000 	.word	0x40020000

08007910 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff f8d9 	bl	8006ad6 <USBH_LL_IncTimer>
}
 8007924:	bf00      	nop
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800793a:	4618      	mov	r0, r3
 800793c:	f7ff f911 	bl	8006b62 <USBH_LL_Connect>
}
 8007940:	bf00      	nop
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff f91a 	bl	8006b90 <USBH_LL_Disconnect>
}
 800795c:	bf00      	nop
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	70fb      	strb	r3, [r7, #3]
 8007970:	4613      	mov	r3, r2
 8007972:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800798e:	4618      	mov	r0, r3
 8007990:	f7ff f8cb 	bl	8006b2a <USBH_LL_PortEnabled>
}
 8007994:	bf00      	nop
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7ff f8cb 	bl	8006b46 <USBH_LL_PortDisabled>
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d12a      	bne.n	8007a20 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80079ca:	4a18      	ldr	r2, [pc, #96]	; (8007a2c <USBH_LL_Init+0x74>)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a15      	ldr	r2, [pc, #84]	; (8007a2c <USBH_LL_Init+0x74>)
 80079d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079da:	4b14      	ldr	r3, [pc, #80]	; (8007a2c <USBH_LL_Init+0x74>)
 80079dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80079e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80079e2:	4b12      	ldr	r3, [pc, #72]	; (8007a2c <USBH_LL_Init+0x74>)
 80079e4:	2208      	movs	r2, #8
 80079e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80079e8:	4b10      	ldr	r3, [pc, #64]	; (8007a2c <USBH_LL_Init+0x74>)
 80079ea:	2201      	movs	r2, #1
 80079ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80079ee:	4b0f      	ldr	r3, [pc, #60]	; (8007a2c <USBH_LL_Init+0x74>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80079f4:	4b0d      	ldr	r3, [pc, #52]	; (8007a2c <USBH_LL_Init+0x74>)
 80079f6:	2202      	movs	r2, #2
 80079f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80079fa:	4b0c      	ldr	r3, [pc, #48]	; (8007a2c <USBH_LL_Init+0x74>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007a00:	480a      	ldr	r0, [pc, #40]	; (8007a2c <USBH_LL_Init+0x74>)
 8007a02:	f7f9 fe2e 	bl	8001662 <HAL_HCD_Init>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007a0c:	f7f9 f8be 	bl	8000b8c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007a10:	4806      	ldr	r0, [pc, #24]	; (8007a2c <USBH_LL_Init+0x74>)
 8007a12:	f7fa fa31 	bl	8001e78 <HAL_HCD_GetCurrentFrame>
 8007a16:	4603      	mov	r3, r0
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7ff f84c 	bl	8006ab8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	200005e0 	.word	0x200005e0

08007a30 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fa f99e 	bl	8001d88 <HAL_HCD_Start>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 f95c 	bl	8007d10 <USBH_Get_USB_Status>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b084      	sub	sp, #16
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fa f9a6 	bl	8001dce <HAL_HCD_Stop>
 8007a82:	4603      	mov	r3, r0
 8007a84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 f941 	bl	8007d10 <USBH_Get_USB_Status>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fa f9f0 	bl	8001e94 <HAL_HCD_GetCurrentSpeed>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d007      	beq.n	8007aca <USBH_LL_GetSpeed+0x2e>
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d302      	bcc.n	8007ac4 <USBH_LL_GetSpeed+0x28>
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d006      	beq.n	8007ad0 <USBH_LL_GetSpeed+0x34>
 8007ac2:	e008      	b.n	8007ad6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ac8:	e008      	b.n	8007adc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007aca:	2301      	movs	r3, #1
 8007acc:	73fb      	strb	r3, [r7, #15]
    break;
 8007ace:	e005      	b.n	8007adc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ad4:	e002      	b.n	8007adc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8007ada:	bf00      	nop
  }
  return  speed;
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fa f983 	bl	8001e08 <HAL_HCD_ResetPort>
 8007b02:	4603      	mov	r3, r0
 8007b04:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 f901 	bl	8007d10 <USBH_Get_USB_Status>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b2e:	78fa      	ldrb	r2, [r7, #3]
 8007b30:	4611      	mov	r1, r2
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fa f98b 	bl	8001e4e <HAL_HCD_HC_GetXferCount>
 8007b38:	4603      	mov	r3, r0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b42:	b590      	push	{r4, r7, lr}
 8007b44:	b089      	sub	sp, #36	; 0x24
 8007b46:	af04      	add	r7, sp, #16
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	4608      	mov	r0, r1
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	461a      	mov	r2, r3
 8007b50:	4603      	mov	r3, r0
 8007b52:	70fb      	strb	r3, [r7, #3]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70bb      	strb	r3, [r7, #2]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007b6a:	787c      	ldrb	r4, [r7, #1]
 8007b6c:	78ba      	ldrb	r2, [r7, #2]
 8007b6e:	78f9      	ldrb	r1, [r7, #3]
 8007b70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b72:	9302      	str	r3, [sp, #8]
 8007b74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	4623      	mov	r3, r4
 8007b82:	f7f9 fdd0 	bl	8001726 <HAL_HCD_HC_Init>
 8007b86:	4603      	mov	r3, r0
 8007b88:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 f8bf 	bl	8007d10 <USBH_Get_USB_Status>
 8007b92:	4603      	mov	r3, r0
 8007b94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd90      	pop	{r4, r7, pc}

08007ba0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007bba:	78fa      	ldrb	r2, [r7, #3]
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7f9 fe49 	bl	8001856 <HAL_HCD_HC_Halt>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 f8a0 	bl	8007d10 <USBH_Get_USB_Status>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007bde:	b590      	push	{r4, r7, lr}
 8007be0:	b089      	sub	sp, #36	; 0x24
 8007be2:	af04      	add	r7, sp, #16
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	4608      	mov	r0, r1
 8007be8:	4611      	mov	r1, r2
 8007bea:	461a      	mov	r2, r3
 8007bec:	4603      	mov	r3, r0
 8007bee:	70fb      	strb	r3, [r7, #3]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	70bb      	strb	r3, [r7, #2]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007c06:	787c      	ldrb	r4, [r7, #1]
 8007c08:	78ba      	ldrb	r2, [r7, #2]
 8007c0a:	78f9      	ldrb	r1, [r7, #3]
 8007c0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c10:	9303      	str	r3, [sp, #12]
 8007c12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007c14:	9302      	str	r3, [sp, #8]
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	9301      	str	r3, [sp, #4]
 8007c1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	4623      	mov	r3, r4
 8007c22:	f7f9 fe3b 	bl	800189c <HAL_HCD_HC_SubmitRequest>
 8007c26:	4603      	mov	r3, r0
 8007c28:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 f86f 	bl	8007d10 <USBH_Get_USB_Status>
 8007c32:	4603      	mov	r3, r0
 8007c34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd90      	pop	{r4, r7, pc}

08007c40 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c52:	78fa      	ldrb	r2, [r7, #3]
 8007c54:	4611      	mov	r1, r2
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fa f8e4 	bl	8001e24 <HAL_HCD_HC_GetURBState>
 8007c5c:	4603      	mov	r3, r0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d103      	bne.n	8007c84 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 f872 	bl	8007d68 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007c84:	20c8      	movs	r0, #200	; 0xc8
 8007c86:	f7f9 fa05 	bl	8001094 <HAL_Delay>
  return USBH_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007caa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007cac:	78fa      	ldrb	r2, [r7, #3]
 8007cae:	68f9      	ldr	r1, [r7, #12]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	440b      	add	r3, r1
 8007cba:	333b      	adds	r3, #59	; 0x3b
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007cc2:	78fa      	ldrb	r2, [r7, #3]
 8007cc4:	68f9      	ldr	r1, [r7, #12]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	00db      	lsls	r3, r3, #3
 8007cce:	440b      	add	r3, r1
 8007cd0:	3350      	adds	r3, #80	; 0x50
 8007cd2:	78ba      	ldrb	r2, [r7, #2]
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	e009      	b.n	8007cec <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007cd8:	78fa      	ldrb	r2, [r7, #3]
 8007cda:	68f9      	ldr	r1, [r7, #12]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	00db      	lsls	r3, r3, #3
 8007ce4:	440b      	add	r3, r1
 8007ce6:	3351      	adds	r3, #81	; 0x51
 8007ce8:	78ba      	ldrb	r2, [r7, #2]
 8007cea:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b082      	sub	sp, #8
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7f9 f9c6 	bl	8001094 <HAL_Delay>
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	4603      	mov	r3, r0
 8007d18:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d817      	bhi.n	8007d54 <USBH_Get_USB_Status+0x44>
 8007d24:	a201      	add	r2, pc, #4	; (adr r2, 8007d2c <USBH_Get_USB_Status+0x1c>)
 8007d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2a:	bf00      	nop
 8007d2c:	08007d3d 	.word	0x08007d3d
 8007d30:	08007d43 	.word	0x08007d43
 8007d34:	08007d49 	.word	0x08007d49
 8007d38:	08007d4f 	.word	0x08007d4f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d40:	e00b      	b.n	8007d5a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007d42:	2302      	movs	r3, #2
 8007d44:	73fb      	strb	r3, [r7, #15]
    break;
 8007d46:	e008      	b.n	8007d5a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d4c:	e005      	b.n	8007d5a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007d4e:	2302      	movs	r3, #2
 8007d50:	73fb      	strb	r3, [r7, #15]
    break;
 8007d52:	e002      	b.n	8007d5a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007d54:	2302      	movs	r3, #2
 8007d56:	73fb      	strb	r3, [r7, #15]
    break;
 8007d58:	bf00      	nop
  }
  return usb_status;
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007d72:	79fb      	ldrb	r3, [r7, #7]
 8007d74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007d76:	79fb      	ldrb	r3, [r7, #7]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d102      	bne.n	8007d82 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	73fb      	strb	r3, [r7, #15]
 8007d80:	e001      	b.n	8007d86 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	4803      	ldr	r0, [pc, #12]	; (8007d9c <MX_DriverVbusFS+0x34>)
 8007d8e:	f7f9 fc4f 	bl	8001630 <HAL_GPIO_WritePin>
}
 8007d92:	bf00      	nop
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	40020800 	.word	0x40020800

08007da0 <__errno>:
 8007da0:	4b01      	ldr	r3, [pc, #4]	; (8007da8 <__errno+0x8>)
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	2000003c 	.word	0x2000003c

08007dac <__libc_init_array>:
 8007dac:	b570      	push	{r4, r5, r6, lr}
 8007dae:	4e0d      	ldr	r6, [pc, #52]	; (8007de4 <__libc_init_array+0x38>)
 8007db0:	4c0d      	ldr	r4, [pc, #52]	; (8007de8 <__libc_init_array+0x3c>)
 8007db2:	1ba4      	subs	r4, r4, r6
 8007db4:	10a4      	asrs	r4, r4, #2
 8007db6:	2500      	movs	r5, #0
 8007db8:	42a5      	cmp	r5, r4
 8007dba:	d109      	bne.n	8007dd0 <__libc_init_array+0x24>
 8007dbc:	4e0b      	ldr	r6, [pc, #44]	; (8007dec <__libc_init_array+0x40>)
 8007dbe:	4c0c      	ldr	r4, [pc, #48]	; (8007df0 <__libc_init_array+0x44>)
 8007dc0:	f000 f8ea 	bl	8007f98 <_init>
 8007dc4:	1ba4      	subs	r4, r4, r6
 8007dc6:	10a4      	asrs	r4, r4, #2
 8007dc8:	2500      	movs	r5, #0
 8007dca:	42a5      	cmp	r5, r4
 8007dcc:	d105      	bne.n	8007dda <__libc_init_array+0x2e>
 8007dce:	bd70      	pop	{r4, r5, r6, pc}
 8007dd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dd4:	4798      	blx	r3
 8007dd6:	3501      	adds	r5, #1
 8007dd8:	e7ee      	b.n	8007db8 <__libc_init_array+0xc>
 8007dda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dde:	4798      	blx	r3
 8007de0:	3501      	adds	r5, #1
 8007de2:	e7f2      	b.n	8007dca <__libc_init_array+0x1e>
 8007de4:	08007fd4 	.word	0x08007fd4
 8007de8:	08007fd4 	.word	0x08007fd4
 8007dec:	08007fd4 	.word	0x08007fd4
 8007df0:	08007fd8 	.word	0x08007fd8

08007df4 <malloc>:
 8007df4:	4b02      	ldr	r3, [pc, #8]	; (8007e00 <malloc+0xc>)
 8007df6:	4601      	mov	r1, r0
 8007df8:	6818      	ldr	r0, [r3, #0]
 8007dfa:	f000 b861 	b.w	8007ec0 <_malloc_r>
 8007dfe:	bf00      	nop
 8007e00:	2000003c 	.word	0x2000003c

08007e04 <free>:
 8007e04:	4b02      	ldr	r3, [pc, #8]	; (8007e10 <free+0xc>)
 8007e06:	4601      	mov	r1, r0
 8007e08:	6818      	ldr	r0, [r3, #0]
 8007e0a:	f000 b80b 	b.w	8007e24 <_free_r>
 8007e0e:	bf00      	nop
 8007e10:	2000003c 	.word	0x2000003c

08007e14 <memset>:
 8007e14:	4402      	add	r2, r0
 8007e16:	4603      	mov	r3, r0
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d100      	bne.n	8007e1e <memset+0xa>
 8007e1c:	4770      	bx	lr
 8007e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e22:	e7f9      	b.n	8007e18 <memset+0x4>

08007e24 <_free_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4605      	mov	r5, r0
 8007e28:	2900      	cmp	r1, #0
 8007e2a:	d045      	beq.n	8007eb8 <_free_r+0x94>
 8007e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e30:	1f0c      	subs	r4, r1, #4
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	bfb8      	it	lt
 8007e36:	18e4      	addlt	r4, r4, r3
 8007e38:	f000 f8ac 	bl	8007f94 <__malloc_lock>
 8007e3c:	4a1f      	ldr	r2, [pc, #124]	; (8007ebc <_free_r+0x98>)
 8007e3e:	6813      	ldr	r3, [r2, #0]
 8007e40:	4610      	mov	r0, r2
 8007e42:	b933      	cbnz	r3, 8007e52 <_free_r+0x2e>
 8007e44:	6063      	str	r3, [r4, #4]
 8007e46:	6014      	str	r4, [r2, #0]
 8007e48:	4628      	mov	r0, r5
 8007e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e4e:	f000 b8a2 	b.w	8007f96 <__malloc_unlock>
 8007e52:	42a3      	cmp	r3, r4
 8007e54:	d90c      	bls.n	8007e70 <_free_r+0x4c>
 8007e56:	6821      	ldr	r1, [r4, #0]
 8007e58:	1862      	adds	r2, r4, r1
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	bf04      	itt	eq
 8007e5e:	681a      	ldreq	r2, [r3, #0]
 8007e60:	685b      	ldreq	r3, [r3, #4]
 8007e62:	6063      	str	r3, [r4, #4]
 8007e64:	bf04      	itt	eq
 8007e66:	1852      	addeq	r2, r2, r1
 8007e68:	6022      	streq	r2, [r4, #0]
 8007e6a:	6004      	str	r4, [r0, #0]
 8007e6c:	e7ec      	b.n	8007e48 <_free_r+0x24>
 8007e6e:	4613      	mov	r3, r2
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	b10a      	cbz	r2, 8007e78 <_free_r+0x54>
 8007e74:	42a2      	cmp	r2, r4
 8007e76:	d9fa      	bls.n	8007e6e <_free_r+0x4a>
 8007e78:	6819      	ldr	r1, [r3, #0]
 8007e7a:	1858      	adds	r0, r3, r1
 8007e7c:	42a0      	cmp	r0, r4
 8007e7e:	d10b      	bne.n	8007e98 <_free_r+0x74>
 8007e80:	6820      	ldr	r0, [r4, #0]
 8007e82:	4401      	add	r1, r0
 8007e84:	1858      	adds	r0, r3, r1
 8007e86:	4282      	cmp	r2, r0
 8007e88:	6019      	str	r1, [r3, #0]
 8007e8a:	d1dd      	bne.n	8007e48 <_free_r+0x24>
 8007e8c:	6810      	ldr	r0, [r2, #0]
 8007e8e:	6852      	ldr	r2, [r2, #4]
 8007e90:	605a      	str	r2, [r3, #4]
 8007e92:	4401      	add	r1, r0
 8007e94:	6019      	str	r1, [r3, #0]
 8007e96:	e7d7      	b.n	8007e48 <_free_r+0x24>
 8007e98:	d902      	bls.n	8007ea0 <_free_r+0x7c>
 8007e9a:	230c      	movs	r3, #12
 8007e9c:	602b      	str	r3, [r5, #0]
 8007e9e:	e7d3      	b.n	8007e48 <_free_r+0x24>
 8007ea0:	6820      	ldr	r0, [r4, #0]
 8007ea2:	1821      	adds	r1, r4, r0
 8007ea4:	428a      	cmp	r2, r1
 8007ea6:	bf04      	itt	eq
 8007ea8:	6811      	ldreq	r1, [r2, #0]
 8007eaa:	6852      	ldreq	r2, [r2, #4]
 8007eac:	6062      	str	r2, [r4, #4]
 8007eae:	bf04      	itt	eq
 8007eb0:	1809      	addeq	r1, r1, r0
 8007eb2:	6021      	streq	r1, [r4, #0]
 8007eb4:	605c      	str	r4, [r3, #4]
 8007eb6:	e7c7      	b.n	8007e48 <_free_r+0x24>
 8007eb8:	bd38      	pop	{r3, r4, r5, pc}
 8007eba:	bf00      	nop
 8007ebc:	200000cc 	.word	0x200000cc

08007ec0 <_malloc_r>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	1ccd      	adds	r5, r1, #3
 8007ec4:	f025 0503 	bic.w	r5, r5, #3
 8007ec8:	3508      	adds	r5, #8
 8007eca:	2d0c      	cmp	r5, #12
 8007ecc:	bf38      	it	cc
 8007ece:	250c      	movcc	r5, #12
 8007ed0:	2d00      	cmp	r5, #0
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	db01      	blt.n	8007eda <_malloc_r+0x1a>
 8007ed6:	42a9      	cmp	r1, r5
 8007ed8:	d903      	bls.n	8007ee2 <_malloc_r+0x22>
 8007eda:	230c      	movs	r3, #12
 8007edc:	6033      	str	r3, [r6, #0]
 8007ede:	2000      	movs	r0, #0
 8007ee0:	bd70      	pop	{r4, r5, r6, pc}
 8007ee2:	f000 f857 	bl	8007f94 <__malloc_lock>
 8007ee6:	4a21      	ldr	r2, [pc, #132]	; (8007f6c <_malloc_r+0xac>)
 8007ee8:	6814      	ldr	r4, [r2, #0]
 8007eea:	4621      	mov	r1, r4
 8007eec:	b991      	cbnz	r1, 8007f14 <_malloc_r+0x54>
 8007eee:	4c20      	ldr	r4, [pc, #128]	; (8007f70 <_malloc_r+0xb0>)
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	b91b      	cbnz	r3, 8007efc <_malloc_r+0x3c>
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	f000 f83d 	bl	8007f74 <_sbrk_r>
 8007efa:	6020      	str	r0, [r4, #0]
 8007efc:	4629      	mov	r1, r5
 8007efe:	4630      	mov	r0, r6
 8007f00:	f000 f838 	bl	8007f74 <_sbrk_r>
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	d124      	bne.n	8007f52 <_malloc_r+0x92>
 8007f08:	230c      	movs	r3, #12
 8007f0a:	6033      	str	r3, [r6, #0]
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f000 f842 	bl	8007f96 <__malloc_unlock>
 8007f12:	e7e4      	b.n	8007ede <_malloc_r+0x1e>
 8007f14:	680b      	ldr	r3, [r1, #0]
 8007f16:	1b5b      	subs	r3, r3, r5
 8007f18:	d418      	bmi.n	8007f4c <_malloc_r+0x8c>
 8007f1a:	2b0b      	cmp	r3, #11
 8007f1c:	d90f      	bls.n	8007f3e <_malloc_r+0x7e>
 8007f1e:	600b      	str	r3, [r1, #0]
 8007f20:	50cd      	str	r5, [r1, r3]
 8007f22:	18cc      	adds	r4, r1, r3
 8007f24:	4630      	mov	r0, r6
 8007f26:	f000 f836 	bl	8007f96 <__malloc_unlock>
 8007f2a:	f104 000b 	add.w	r0, r4, #11
 8007f2e:	1d23      	adds	r3, r4, #4
 8007f30:	f020 0007 	bic.w	r0, r0, #7
 8007f34:	1ac3      	subs	r3, r0, r3
 8007f36:	d0d3      	beq.n	8007ee0 <_malloc_r+0x20>
 8007f38:	425a      	negs	r2, r3
 8007f3a:	50e2      	str	r2, [r4, r3]
 8007f3c:	e7d0      	b.n	8007ee0 <_malloc_r+0x20>
 8007f3e:	428c      	cmp	r4, r1
 8007f40:	684b      	ldr	r3, [r1, #4]
 8007f42:	bf16      	itet	ne
 8007f44:	6063      	strne	r3, [r4, #4]
 8007f46:	6013      	streq	r3, [r2, #0]
 8007f48:	460c      	movne	r4, r1
 8007f4a:	e7eb      	b.n	8007f24 <_malloc_r+0x64>
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	6849      	ldr	r1, [r1, #4]
 8007f50:	e7cc      	b.n	8007eec <_malloc_r+0x2c>
 8007f52:	1cc4      	adds	r4, r0, #3
 8007f54:	f024 0403 	bic.w	r4, r4, #3
 8007f58:	42a0      	cmp	r0, r4
 8007f5a:	d005      	beq.n	8007f68 <_malloc_r+0xa8>
 8007f5c:	1a21      	subs	r1, r4, r0
 8007f5e:	4630      	mov	r0, r6
 8007f60:	f000 f808 	bl	8007f74 <_sbrk_r>
 8007f64:	3001      	adds	r0, #1
 8007f66:	d0cf      	beq.n	8007f08 <_malloc_r+0x48>
 8007f68:	6025      	str	r5, [r4, #0]
 8007f6a:	e7db      	b.n	8007f24 <_malloc_r+0x64>
 8007f6c:	200000cc 	.word	0x200000cc
 8007f70:	200000d0 	.word	0x200000d0

08007f74 <_sbrk_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	4c06      	ldr	r4, [pc, #24]	; (8007f90 <_sbrk_r+0x1c>)
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	4608      	mov	r0, r1
 8007f7e:	6023      	str	r3, [r4, #0]
 8007f80:	f7f8 ffa0 	bl	8000ec4 <_sbrk>
 8007f84:	1c43      	adds	r3, r0, #1
 8007f86:	d102      	bne.n	8007f8e <_sbrk_r+0x1a>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	b103      	cbz	r3, 8007f8e <_sbrk_r+0x1a>
 8007f8c:	602b      	str	r3, [r5, #0]
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	200008a4 	.word	0x200008a4

08007f94 <__malloc_lock>:
 8007f94:	4770      	bx	lr

08007f96 <__malloc_unlock>:
 8007f96:	4770      	bx	lr

08007f98 <_init>:
 8007f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9a:	bf00      	nop
 8007f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9e:	bc08      	pop	{r3}
 8007fa0:	469e      	mov	lr, r3
 8007fa2:	4770      	bx	lr

08007fa4 <_fini>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	bf00      	nop
 8007fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007faa:	bc08      	pop	{r3}
 8007fac:	469e      	mov	lr, r3
 8007fae:	4770      	bx	lr
